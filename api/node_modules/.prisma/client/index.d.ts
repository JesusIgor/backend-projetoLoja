
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Carrinho
 * 
 */
export type Carrinho = $Result.DefaultSelection<Prisma.$CarrinhoPayload>
/**
 * Model Categorias
 * 
 */
export type Categorias = $Result.DefaultSelection<Prisma.$CategoriasPayload>
/**
 * Model Pedidos
 * 
 */
export type Pedidos = $Result.DefaultSelection<Prisma.$PedidosPayload>
/**
 * Model ProdutoCategoria
 * 
 */
export type ProdutoCategoria = $Result.DefaultSelection<Prisma.$ProdutoCategoriaPayload>
/**
 * Model Produtos
 * 
 */
export type Produtos = $Result.DefaultSelection<Prisma.$ProdutosPayload>
/**
 * Model Usuarios
 * 
 */
export type Usuarios = $Result.DefaultSelection<Prisma.$UsuariosPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Carrinhos
 * const carrinhos = await prisma.carrinho.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Carrinhos
   * const carrinhos = await prisma.carrinho.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.carrinho`: Exposes CRUD operations for the **Carrinho** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Carrinhos
    * const carrinhos = await prisma.carrinho.findMany()
    * ```
    */
  get carrinho(): Prisma.CarrinhoDelegate<ExtArgs>;

  /**
   * `prisma.categorias`: Exposes CRUD operations for the **Categorias** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categorias
    * const categorias = await prisma.categorias.findMany()
    * ```
    */
  get categorias(): Prisma.CategoriasDelegate<ExtArgs>;

  /**
   * `prisma.pedidos`: Exposes CRUD operations for the **Pedidos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pedidos
    * const pedidos = await prisma.pedidos.findMany()
    * ```
    */
  get pedidos(): Prisma.PedidosDelegate<ExtArgs>;

  /**
   * `prisma.produtoCategoria`: Exposes CRUD operations for the **ProdutoCategoria** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProdutoCategorias
    * const produtoCategorias = await prisma.produtoCategoria.findMany()
    * ```
    */
  get produtoCategoria(): Prisma.ProdutoCategoriaDelegate<ExtArgs>;

  /**
   * `prisma.produtos`: Exposes CRUD operations for the **Produtos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Produtos
    * const produtos = await prisma.produtos.findMany()
    * ```
    */
  get produtos(): Prisma.ProdutosDelegate<ExtArgs>;

  /**
   * `prisma.usuarios`: Exposes CRUD operations for the **Usuarios** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuarios.findMany()
    * ```
    */
  get usuarios(): Prisma.UsuariosDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Carrinho: 'Carrinho',
    Categorias: 'Categorias',
    Pedidos: 'Pedidos',
    ProdutoCategoria: 'ProdutoCategoria',
    Produtos: 'Produtos',
    Usuarios: 'Usuarios'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "carrinho" | "categorias" | "pedidos" | "produtoCategoria" | "produtos" | "usuarios"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Carrinho: {
        payload: Prisma.$CarrinhoPayload<ExtArgs>
        fields: Prisma.CarrinhoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CarrinhoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarrinhoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CarrinhoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarrinhoPayload>
          }
          findFirst: {
            args: Prisma.CarrinhoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarrinhoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CarrinhoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarrinhoPayload>
          }
          findMany: {
            args: Prisma.CarrinhoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarrinhoPayload>[]
          }
          create: {
            args: Prisma.CarrinhoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarrinhoPayload>
          }
          createMany: {
            args: Prisma.CarrinhoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CarrinhoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarrinhoPayload>
          }
          update: {
            args: Prisma.CarrinhoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarrinhoPayload>
          }
          deleteMany: {
            args: Prisma.CarrinhoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CarrinhoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CarrinhoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarrinhoPayload>
          }
          aggregate: {
            args: Prisma.CarrinhoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCarrinho>
          }
          groupBy: {
            args: Prisma.CarrinhoGroupByArgs<ExtArgs>
            result: $Utils.Optional<CarrinhoGroupByOutputType>[]
          }
          count: {
            args: Prisma.CarrinhoCountArgs<ExtArgs>
            result: $Utils.Optional<CarrinhoCountAggregateOutputType> | number
          }
        }
      }
      Categorias: {
        payload: Prisma.$CategoriasPayload<ExtArgs>
        fields: Prisma.CategoriasFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoriasFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriasPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoriasFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriasPayload>
          }
          findFirst: {
            args: Prisma.CategoriasFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriasPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoriasFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriasPayload>
          }
          findMany: {
            args: Prisma.CategoriasFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriasPayload>[]
          }
          create: {
            args: Prisma.CategoriasCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriasPayload>
          }
          createMany: {
            args: Prisma.CategoriasCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CategoriasDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriasPayload>
          }
          update: {
            args: Prisma.CategoriasUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriasPayload>
          }
          deleteMany: {
            args: Prisma.CategoriasDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoriasUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CategoriasUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriasPayload>
          }
          aggregate: {
            args: Prisma.CategoriasAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategorias>
          }
          groupBy: {
            args: Prisma.CategoriasGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoriasGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoriasCountArgs<ExtArgs>
            result: $Utils.Optional<CategoriasCountAggregateOutputType> | number
          }
        }
      }
      Pedidos: {
        payload: Prisma.$PedidosPayload<ExtArgs>
        fields: Prisma.PedidosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PedidosFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PedidosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PedidosFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PedidosPayload>
          }
          findFirst: {
            args: Prisma.PedidosFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PedidosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PedidosFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PedidosPayload>
          }
          findMany: {
            args: Prisma.PedidosFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PedidosPayload>[]
          }
          create: {
            args: Prisma.PedidosCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PedidosPayload>
          }
          createMany: {
            args: Prisma.PedidosCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PedidosDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PedidosPayload>
          }
          update: {
            args: Prisma.PedidosUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PedidosPayload>
          }
          deleteMany: {
            args: Prisma.PedidosDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PedidosUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PedidosUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PedidosPayload>
          }
          aggregate: {
            args: Prisma.PedidosAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePedidos>
          }
          groupBy: {
            args: Prisma.PedidosGroupByArgs<ExtArgs>
            result: $Utils.Optional<PedidosGroupByOutputType>[]
          }
          count: {
            args: Prisma.PedidosCountArgs<ExtArgs>
            result: $Utils.Optional<PedidosCountAggregateOutputType> | number
          }
        }
      }
      ProdutoCategoria: {
        payload: Prisma.$ProdutoCategoriaPayload<ExtArgs>
        fields: Prisma.ProdutoCategoriaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProdutoCategoriaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoCategoriaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProdutoCategoriaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoCategoriaPayload>
          }
          findFirst: {
            args: Prisma.ProdutoCategoriaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoCategoriaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProdutoCategoriaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoCategoriaPayload>
          }
          findMany: {
            args: Prisma.ProdutoCategoriaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoCategoriaPayload>[]
          }
          create: {
            args: Prisma.ProdutoCategoriaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoCategoriaPayload>
          }
          createMany: {
            args: Prisma.ProdutoCategoriaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProdutoCategoriaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoCategoriaPayload>
          }
          update: {
            args: Prisma.ProdutoCategoriaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoCategoriaPayload>
          }
          deleteMany: {
            args: Prisma.ProdutoCategoriaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProdutoCategoriaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProdutoCategoriaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoCategoriaPayload>
          }
          aggregate: {
            args: Prisma.ProdutoCategoriaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProdutoCategoria>
          }
          groupBy: {
            args: Prisma.ProdutoCategoriaGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProdutoCategoriaGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProdutoCategoriaCountArgs<ExtArgs>
            result: $Utils.Optional<ProdutoCategoriaCountAggregateOutputType> | number
          }
        }
      }
      Produtos: {
        payload: Prisma.$ProdutosPayload<ExtArgs>
        fields: Prisma.ProdutosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProdutosFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProdutosFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutosPayload>
          }
          findFirst: {
            args: Prisma.ProdutosFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProdutosFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutosPayload>
          }
          findMany: {
            args: Prisma.ProdutosFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutosPayload>[]
          }
          create: {
            args: Prisma.ProdutosCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutosPayload>
          }
          createMany: {
            args: Prisma.ProdutosCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProdutosDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutosPayload>
          }
          update: {
            args: Prisma.ProdutosUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutosPayload>
          }
          deleteMany: {
            args: Prisma.ProdutosDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProdutosUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProdutosUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutosPayload>
          }
          aggregate: {
            args: Prisma.ProdutosAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProdutos>
          }
          groupBy: {
            args: Prisma.ProdutosGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProdutosGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProdutosCountArgs<ExtArgs>
            result: $Utils.Optional<ProdutosCountAggregateOutputType> | number
          }
        }
      }
      Usuarios: {
        payload: Prisma.$UsuariosPayload<ExtArgs>
        fields: Prisma.UsuariosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsuariosFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuariosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsuariosFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuariosPayload>
          }
          findFirst: {
            args: Prisma.UsuariosFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuariosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsuariosFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuariosPayload>
          }
          findMany: {
            args: Prisma.UsuariosFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuariosPayload>[]
          }
          create: {
            args: Prisma.UsuariosCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuariosPayload>
          }
          createMany: {
            args: Prisma.UsuariosCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UsuariosDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuariosPayload>
          }
          update: {
            args: Prisma.UsuariosUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuariosPayload>
          }
          deleteMany: {
            args: Prisma.UsuariosDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsuariosUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UsuariosUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuariosPayload>
          }
          aggregate: {
            args: Prisma.UsuariosAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsuarios>
          }
          groupBy: {
            args: Prisma.UsuariosGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsuariosGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsuariosCountArgs<ExtArgs>
            result: $Utils.Optional<UsuariosCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CategoriasCountOutputType
   */

  export type CategoriasCountOutputType = {
    ProdutoCategoria: number
  }

  export type CategoriasCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ProdutoCategoria?: boolean | CategoriasCountOutputTypeCountProdutoCategoriaArgs
  }

  // Custom InputTypes
  /**
   * CategoriasCountOutputType without action
   */
  export type CategoriasCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriasCountOutputType
     */
    select?: CategoriasCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoriasCountOutputType without action
   */
  export type CategoriasCountOutputTypeCountProdutoCategoriaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProdutoCategoriaWhereInput
  }


  /**
   * Count Type PedidosCountOutputType
   */

  export type PedidosCountOutputType = {
    Carrinho: number
  }

  export type PedidosCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Carrinho?: boolean | PedidosCountOutputTypeCountCarrinhoArgs
  }

  // Custom InputTypes
  /**
   * PedidosCountOutputType without action
   */
  export type PedidosCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PedidosCountOutputType
     */
    select?: PedidosCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PedidosCountOutputType without action
   */
  export type PedidosCountOutputTypeCountCarrinhoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CarrinhoWhereInput
  }


  /**
   * Count Type ProdutosCountOutputType
   */

  export type ProdutosCountOutputType = {
    Carrinho: number
    ProdutoCategoria: number
  }

  export type ProdutosCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Carrinho?: boolean | ProdutosCountOutputTypeCountCarrinhoArgs
    ProdutoCategoria?: boolean | ProdutosCountOutputTypeCountProdutoCategoriaArgs
  }

  // Custom InputTypes
  /**
   * ProdutosCountOutputType without action
   */
  export type ProdutosCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutosCountOutputType
     */
    select?: ProdutosCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProdutosCountOutputType without action
   */
  export type ProdutosCountOutputTypeCountCarrinhoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CarrinhoWhereInput
  }

  /**
   * ProdutosCountOutputType without action
   */
  export type ProdutosCountOutputTypeCountProdutoCategoriaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProdutoCategoriaWhereInput
  }


  /**
   * Count Type UsuariosCountOutputType
   */

  export type UsuariosCountOutputType = {
    Pedidos: number
  }

  export type UsuariosCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Pedidos?: boolean | UsuariosCountOutputTypeCountPedidosArgs
  }

  // Custom InputTypes
  /**
   * UsuariosCountOutputType without action
   */
  export type UsuariosCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuariosCountOutputType
     */
    select?: UsuariosCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsuariosCountOutputType without action
   */
  export type UsuariosCountOutputTypeCountPedidosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PedidosWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Carrinho
   */

  export type AggregateCarrinho = {
    _count: CarrinhoCountAggregateOutputType | null
    _avg: CarrinhoAvgAggregateOutputType | null
    _sum: CarrinhoSumAggregateOutputType | null
    _min: CarrinhoMinAggregateOutputType | null
    _max: CarrinhoMaxAggregateOutputType | null
  }

  export type CarrinhoAvgAggregateOutputType = {
    id: number | null
    produto_id: number | null
    quantidade: number | null
    pedido_id: number | null
  }

  export type CarrinhoSumAggregateOutputType = {
    id: number | null
    produto_id: number | null
    quantidade: number | null
    pedido_id: number | null
  }

  export type CarrinhoMinAggregateOutputType = {
    id: number | null
    produto_id: number | null
    quantidade: number | null
    pedido_id: number | null
  }

  export type CarrinhoMaxAggregateOutputType = {
    id: number | null
    produto_id: number | null
    quantidade: number | null
    pedido_id: number | null
  }

  export type CarrinhoCountAggregateOutputType = {
    id: number
    produto_id: number
    quantidade: number
    pedido_id: number
    _all: number
  }


  export type CarrinhoAvgAggregateInputType = {
    id?: true
    produto_id?: true
    quantidade?: true
    pedido_id?: true
  }

  export type CarrinhoSumAggregateInputType = {
    id?: true
    produto_id?: true
    quantidade?: true
    pedido_id?: true
  }

  export type CarrinhoMinAggregateInputType = {
    id?: true
    produto_id?: true
    quantidade?: true
    pedido_id?: true
  }

  export type CarrinhoMaxAggregateInputType = {
    id?: true
    produto_id?: true
    quantidade?: true
    pedido_id?: true
  }

  export type CarrinhoCountAggregateInputType = {
    id?: true
    produto_id?: true
    quantidade?: true
    pedido_id?: true
    _all?: true
  }

  export type CarrinhoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Carrinho to aggregate.
     */
    where?: CarrinhoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Carrinhos to fetch.
     */
    orderBy?: CarrinhoOrderByWithRelationInput | CarrinhoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CarrinhoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Carrinhos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Carrinhos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Carrinhos
    **/
    _count?: true | CarrinhoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CarrinhoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CarrinhoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CarrinhoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CarrinhoMaxAggregateInputType
  }

  export type GetCarrinhoAggregateType<T extends CarrinhoAggregateArgs> = {
        [P in keyof T & keyof AggregateCarrinho]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCarrinho[P]>
      : GetScalarType<T[P], AggregateCarrinho[P]>
  }




  export type CarrinhoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CarrinhoWhereInput
    orderBy?: CarrinhoOrderByWithAggregationInput | CarrinhoOrderByWithAggregationInput[]
    by: CarrinhoScalarFieldEnum[] | CarrinhoScalarFieldEnum
    having?: CarrinhoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CarrinhoCountAggregateInputType | true
    _avg?: CarrinhoAvgAggregateInputType
    _sum?: CarrinhoSumAggregateInputType
    _min?: CarrinhoMinAggregateInputType
    _max?: CarrinhoMaxAggregateInputType
  }

  export type CarrinhoGroupByOutputType = {
    id: number
    produto_id: number | null
    quantidade: number | null
    pedido_id: number | null
    _count: CarrinhoCountAggregateOutputType | null
    _avg: CarrinhoAvgAggregateOutputType | null
    _sum: CarrinhoSumAggregateOutputType | null
    _min: CarrinhoMinAggregateOutputType | null
    _max: CarrinhoMaxAggregateOutputType | null
  }

  type GetCarrinhoGroupByPayload<T extends CarrinhoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CarrinhoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CarrinhoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CarrinhoGroupByOutputType[P]>
            : GetScalarType<T[P], CarrinhoGroupByOutputType[P]>
        }
      >
    >


  export type CarrinhoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    produto_id?: boolean
    quantidade?: boolean
    pedido_id?: boolean
    Produtos?: boolean | Carrinho$ProdutosArgs<ExtArgs>
    Pedidos?: boolean | Carrinho$PedidosArgs<ExtArgs>
  }, ExtArgs["result"]["carrinho"]>


  export type CarrinhoSelectScalar = {
    id?: boolean
    produto_id?: boolean
    quantidade?: boolean
    pedido_id?: boolean
  }

  export type CarrinhoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Produtos?: boolean | Carrinho$ProdutosArgs<ExtArgs>
    Pedidos?: boolean | Carrinho$PedidosArgs<ExtArgs>
  }

  export type $CarrinhoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Carrinho"
    objects: {
      Produtos: Prisma.$ProdutosPayload<ExtArgs> | null
      Pedidos: Prisma.$PedidosPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      produto_id: number | null
      quantidade: number | null
      pedido_id: number | null
    }, ExtArgs["result"]["carrinho"]>
    composites: {}
  }

  type CarrinhoGetPayload<S extends boolean | null | undefined | CarrinhoDefaultArgs> = $Result.GetResult<Prisma.$CarrinhoPayload, S>

  type CarrinhoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CarrinhoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CarrinhoCountAggregateInputType | true
    }

  export interface CarrinhoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Carrinho'], meta: { name: 'Carrinho' } }
    /**
     * Find zero or one Carrinho that matches the filter.
     * @param {CarrinhoFindUniqueArgs} args - Arguments to find a Carrinho
     * @example
     * // Get one Carrinho
     * const carrinho = await prisma.carrinho.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CarrinhoFindUniqueArgs>(args: SelectSubset<T, CarrinhoFindUniqueArgs<ExtArgs>>): Prisma__CarrinhoClient<$Result.GetResult<Prisma.$CarrinhoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Carrinho that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CarrinhoFindUniqueOrThrowArgs} args - Arguments to find a Carrinho
     * @example
     * // Get one Carrinho
     * const carrinho = await prisma.carrinho.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CarrinhoFindUniqueOrThrowArgs>(args: SelectSubset<T, CarrinhoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CarrinhoClient<$Result.GetResult<Prisma.$CarrinhoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Carrinho that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarrinhoFindFirstArgs} args - Arguments to find a Carrinho
     * @example
     * // Get one Carrinho
     * const carrinho = await prisma.carrinho.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CarrinhoFindFirstArgs>(args?: SelectSubset<T, CarrinhoFindFirstArgs<ExtArgs>>): Prisma__CarrinhoClient<$Result.GetResult<Prisma.$CarrinhoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Carrinho that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarrinhoFindFirstOrThrowArgs} args - Arguments to find a Carrinho
     * @example
     * // Get one Carrinho
     * const carrinho = await prisma.carrinho.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CarrinhoFindFirstOrThrowArgs>(args?: SelectSubset<T, CarrinhoFindFirstOrThrowArgs<ExtArgs>>): Prisma__CarrinhoClient<$Result.GetResult<Prisma.$CarrinhoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Carrinhos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarrinhoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Carrinhos
     * const carrinhos = await prisma.carrinho.findMany()
     * 
     * // Get first 10 Carrinhos
     * const carrinhos = await prisma.carrinho.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const carrinhoWithIdOnly = await prisma.carrinho.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CarrinhoFindManyArgs>(args?: SelectSubset<T, CarrinhoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CarrinhoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Carrinho.
     * @param {CarrinhoCreateArgs} args - Arguments to create a Carrinho.
     * @example
     * // Create one Carrinho
     * const Carrinho = await prisma.carrinho.create({
     *   data: {
     *     // ... data to create a Carrinho
     *   }
     * })
     * 
     */
    create<T extends CarrinhoCreateArgs>(args: SelectSubset<T, CarrinhoCreateArgs<ExtArgs>>): Prisma__CarrinhoClient<$Result.GetResult<Prisma.$CarrinhoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Carrinhos.
     * @param {CarrinhoCreateManyArgs} args - Arguments to create many Carrinhos.
     * @example
     * // Create many Carrinhos
     * const carrinho = await prisma.carrinho.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CarrinhoCreateManyArgs>(args?: SelectSubset<T, CarrinhoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Carrinho.
     * @param {CarrinhoDeleteArgs} args - Arguments to delete one Carrinho.
     * @example
     * // Delete one Carrinho
     * const Carrinho = await prisma.carrinho.delete({
     *   where: {
     *     // ... filter to delete one Carrinho
     *   }
     * })
     * 
     */
    delete<T extends CarrinhoDeleteArgs>(args: SelectSubset<T, CarrinhoDeleteArgs<ExtArgs>>): Prisma__CarrinhoClient<$Result.GetResult<Prisma.$CarrinhoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Carrinho.
     * @param {CarrinhoUpdateArgs} args - Arguments to update one Carrinho.
     * @example
     * // Update one Carrinho
     * const carrinho = await prisma.carrinho.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CarrinhoUpdateArgs>(args: SelectSubset<T, CarrinhoUpdateArgs<ExtArgs>>): Prisma__CarrinhoClient<$Result.GetResult<Prisma.$CarrinhoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Carrinhos.
     * @param {CarrinhoDeleteManyArgs} args - Arguments to filter Carrinhos to delete.
     * @example
     * // Delete a few Carrinhos
     * const { count } = await prisma.carrinho.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CarrinhoDeleteManyArgs>(args?: SelectSubset<T, CarrinhoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Carrinhos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarrinhoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Carrinhos
     * const carrinho = await prisma.carrinho.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CarrinhoUpdateManyArgs>(args: SelectSubset<T, CarrinhoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Carrinho.
     * @param {CarrinhoUpsertArgs} args - Arguments to update or create a Carrinho.
     * @example
     * // Update or create a Carrinho
     * const carrinho = await prisma.carrinho.upsert({
     *   create: {
     *     // ... data to create a Carrinho
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Carrinho we want to update
     *   }
     * })
     */
    upsert<T extends CarrinhoUpsertArgs>(args: SelectSubset<T, CarrinhoUpsertArgs<ExtArgs>>): Prisma__CarrinhoClient<$Result.GetResult<Prisma.$CarrinhoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Carrinhos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarrinhoCountArgs} args - Arguments to filter Carrinhos to count.
     * @example
     * // Count the number of Carrinhos
     * const count = await prisma.carrinho.count({
     *   where: {
     *     // ... the filter for the Carrinhos we want to count
     *   }
     * })
    **/
    count<T extends CarrinhoCountArgs>(
      args?: Subset<T, CarrinhoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CarrinhoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Carrinho.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarrinhoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CarrinhoAggregateArgs>(args: Subset<T, CarrinhoAggregateArgs>): Prisma.PrismaPromise<GetCarrinhoAggregateType<T>>

    /**
     * Group by Carrinho.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarrinhoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CarrinhoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CarrinhoGroupByArgs['orderBy'] }
        : { orderBy?: CarrinhoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CarrinhoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCarrinhoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Carrinho model
   */
  readonly fields: CarrinhoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Carrinho.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CarrinhoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Produtos<T extends Carrinho$ProdutosArgs<ExtArgs> = {}>(args?: Subset<T, Carrinho$ProdutosArgs<ExtArgs>>): Prisma__ProdutosClient<$Result.GetResult<Prisma.$ProdutosPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    Pedidos<T extends Carrinho$PedidosArgs<ExtArgs> = {}>(args?: Subset<T, Carrinho$PedidosArgs<ExtArgs>>): Prisma__PedidosClient<$Result.GetResult<Prisma.$PedidosPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Carrinho model
   */ 
  interface CarrinhoFieldRefs {
    readonly id: FieldRef<"Carrinho", 'Int'>
    readonly produto_id: FieldRef<"Carrinho", 'Int'>
    readonly quantidade: FieldRef<"Carrinho", 'Int'>
    readonly pedido_id: FieldRef<"Carrinho", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Carrinho findUnique
   */
  export type CarrinhoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrinho
     */
    select?: CarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarrinhoInclude<ExtArgs> | null
    /**
     * Filter, which Carrinho to fetch.
     */
    where: CarrinhoWhereUniqueInput
  }

  /**
   * Carrinho findUniqueOrThrow
   */
  export type CarrinhoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrinho
     */
    select?: CarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarrinhoInclude<ExtArgs> | null
    /**
     * Filter, which Carrinho to fetch.
     */
    where: CarrinhoWhereUniqueInput
  }

  /**
   * Carrinho findFirst
   */
  export type CarrinhoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrinho
     */
    select?: CarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarrinhoInclude<ExtArgs> | null
    /**
     * Filter, which Carrinho to fetch.
     */
    where?: CarrinhoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Carrinhos to fetch.
     */
    orderBy?: CarrinhoOrderByWithRelationInput | CarrinhoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Carrinhos.
     */
    cursor?: CarrinhoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Carrinhos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Carrinhos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Carrinhos.
     */
    distinct?: CarrinhoScalarFieldEnum | CarrinhoScalarFieldEnum[]
  }

  /**
   * Carrinho findFirstOrThrow
   */
  export type CarrinhoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrinho
     */
    select?: CarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarrinhoInclude<ExtArgs> | null
    /**
     * Filter, which Carrinho to fetch.
     */
    where?: CarrinhoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Carrinhos to fetch.
     */
    orderBy?: CarrinhoOrderByWithRelationInput | CarrinhoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Carrinhos.
     */
    cursor?: CarrinhoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Carrinhos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Carrinhos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Carrinhos.
     */
    distinct?: CarrinhoScalarFieldEnum | CarrinhoScalarFieldEnum[]
  }

  /**
   * Carrinho findMany
   */
  export type CarrinhoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrinho
     */
    select?: CarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarrinhoInclude<ExtArgs> | null
    /**
     * Filter, which Carrinhos to fetch.
     */
    where?: CarrinhoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Carrinhos to fetch.
     */
    orderBy?: CarrinhoOrderByWithRelationInput | CarrinhoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Carrinhos.
     */
    cursor?: CarrinhoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Carrinhos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Carrinhos.
     */
    skip?: number
    distinct?: CarrinhoScalarFieldEnum | CarrinhoScalarFieldEnum[]
  }

  /**
   * Carrinho create
   */
  export type CarrinhoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrinho
     */
    select?: CarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarrinhoInclude<ExtArgs> | null
    /**
     * The data needed to create a Carrinho.
     */
    data?: XOR<CarrinhoCreateInput, CarrinhoUncheckedCreateInput>
  }

  /**
   * Carrinho createMany
   */
  export type CarrinhoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Carrinhos.
     */
    data: CarrinhoCreateManyInput | CarrinhoCreateManyInput[]
  }

  /**
   * Carrinho update
   */
  export type CarrinhoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrinho
     */
    select?: CarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarrinhoInclude<ExtArgs> | null
    /**
     * The data needed to update a Carrinho.
     */
    data: XOR<CarrinhoUpdateInput, CarrinhoUncheckedUpdateInput>
    /**
     * Choose, which Carrinho to update.
     */
    where: CarrinhoWhereUniqueInput
  }

  /**
   * Carrinho updateMany
   */
  export type CarrinhoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Carrinhos.
     */
    data: XOR<CarrinhoUpdateManyMutationInput, CarrinhoUncheckedUpdateManyInput>
    /**
     * Filter which Carrinhos to update
     */
    where?: CarrinhoWhereInput
  }

  /**
   * Carrinho upsert
   */
  export type CarrinhoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrinho
     */
    select?: CarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarrinhoInclude<ExtArgs> | null
    /**
     * The filter to search for the Carrinho to update in case it exists.
     */
    where: CarrinhoWhereUniqueInput
    /**
     * In case the Carrinho found by the `where` argument doesn't exist, create a new Carrinho with this data.
     */
    create: XOR<CarrinhoCreateInput, CarrinhoUncheckedCreateInput>
    /**
     * In case the Carrinho was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CarrinhoUpdateInput, CarrinhoUncheckedUpdateInput>
  }

  /**
   * Carrinho delete
   */
  export type CarrinhoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrinho
     */
    select?: CarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarrinhoInclude<ExtArgs> | null
    /**
     * Filter which Carrinho to delete.
     */
    where: CarrinhoWhereUniqueInput
  }

  /**
   * Carrinho deleteMany
   */
  export type CarrinhoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Carrinhos to delete
     */
    where?: CarrinhoWhereInput
  }

  /**
   * Carrinho.Produtos
   */
  export type Carrinho$ProdutosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produtos
     */
    select?: ProdutosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutosInclude<ExtArgs> | null
    where?: ProdutosWhereInput
  }

  /**
   * Carrinho.Pedidos
   */
  export type Carrinho$PedidosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedidos
     */
    select?: PedidosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PedidosInclude<ExtArgs> | null
    where?: PedidosWhereInput
  }

  /**
   * Carrinho without action
   */
  export type CarrinhoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrinho
     */
    select?: CarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarrinhoInclude<ExtArgs> | null
  }


  /**
   * Model Categorias
   */

  export type AggregateCategorias = {
    _count: CategoriasCountAggregateOutputType | null
    _avg: CategoriasAvgAggregateOutputType | null
    _sum: CategoriasSumAggregateOutputType | null
    _min: CategoriasMinAggregateOutputType | null
    _max: CategoriasMaxAggregateOutputType | null
  }

  export type CategoriasAvgAggregateOutputType = {
    id: number | null
  }

  export type CategoriasSumAggregateOutputType = {
    id: number | null
  }

  export type CategoriasMinAggregateOutputType = {
    id: number | null
    categoria_nome: string | null
  }

  export type CategoriasMaxAggregateOutputType = {
    id: number | null
    categoria_nome: string | null
  }

  export type CategoriasCountAggregateOutputType = {
    id: number
    categoria_nome: number
    _all: number
  }


  export type CategoriasAvgAggregateInputType = {
    id?: true
  }

  export type CategoriasSumAggregateInputType = {
    id?: true
  }

  export type CategoriasMinAggregateInputType = {
    id?: true
    categoria_nome?: true
  }

  export type CategoriasMaxAggregateInputType = {
    id?: true
    categoria_nome?: true
  }

  export type CategoriasCountAggregateInputType = {
    id?: true
    categoria_nome?: true
    _all?: true
  }

  export type CategoriasAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categorias to aggregate.
     */
    where?: CategoriasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categorias to fetch.
     */
    orderBy?: CategoriasOrderByWithRelationInput | CategoriasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoriasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categorias
    **/
    _count?: true | CategoriasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoriasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategoriasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoriasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoriasMaxAggregateInputType
  }

  export type GetCategoriasAggregateType<T extends CategoriasAggregateArgs> = {
        [P in keyof T & keyof AggregateCategorias]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategorias[P]>
      : GetScalarType<T[P], AggregateCategorias[P]>
  }




  export type CategoriasGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoriasWhereInput
    orderBy?: CategoriasOrderByWithAggregationInput | CategoriasOrderByWithAggregationInput[]
    by: CategoriasScalarFieldEnum[] | CategoriasScalarFieldEnum
    having?: CategoriasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoriasCountAggregateInputType | true
    _avg?: CategoriasAvgAggregateInputType
    _sum?: CategoriasSumAggregateInputType
    _min?: CategoriasMinAggregateInputType
    _max?: CategoriasMaxAggregateInputType
  }

  export type CategoriasGroupByOutputType = {
    id: number
    categoria_nome: string | null
    _count: CategoriasCountAggregateOutputType | null
    _avg: CategoriasAvgAggregateOutputType | null
    _sum: CategoriasSumAggregateOutputType | null
    _min: CategoriasMinAggregateOutputType | null
    _max: CategoriasMaxAggregateOutputType | null
  }

  type GetCategoriasGroupByPayload<T extends CategoriasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoriasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoriasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoriasGroupByOutputType[P]>
            : GetScalarType<T[P], CategoriasGroupByOutputType[P]>
        }
      >
    >


  export type CategoriasSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    categoria_nome?: boolean
    ProdutoCategoria?: boolean | Categorias$ProdutoCategoriaArgs<ExtArgs>
    _count?: boolean | CategoriasCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["categorias"]>


  export type CategoriasSelectScalar = {
    id?: boolean
    categoria_nome?: boolean
  }

  export type CategoriasInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ProdutoCategoria?: boolean | Categorias$ProdutoCategoriaArgs<ExtArgs>
    _count?: boolean | CategoriasCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $CategoriasPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Categorias"
    objects: {
      ProdutoCategoria: Prisma.$ProdutoCategoriaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      categoria_nome: string | null
    }, ExtArgs["result"]["categorias"]>
    composites: {}
  }

  type CategoriasGetPayload<S extends boolean | null | undefined | CategoriasDefaultArgs> = $Result.GetResult<Prisma.$CategoriasPayload, S>

  type CategoriasCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CategoriasFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CategoriasCountAggregateInputType | true
    }

  export interface CategoriasDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Categorias'], meta: { name: 'Categorias' } }
    /**
     * Find zero or one Categorias that matches the filter.
     * @param {CategoriasFindUniqueArgs} args - Arguments to find a Categorias
     * @example
     * // Get one Categorias
     * const categorias = await prisma.categorias.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoriasFindUniqueArgs>(args: SelectSubset<T, CategoriasFindUniqueArgs<ExtArgs>>): Prisma__CategoriasClient<$Result.GetResult<Prisma.$CategoriasPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Categorias that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CategoriasFindUniqueOrThrowArgs} args - Arguments to find a Categorias
     * @example
     * // Get one Categorias
     * const categorias = await prisma.categorias.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoriasFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoriasFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoriasClient<$Result.GetResult<Prisma.$CategoriasPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Categorias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriasFindFirstArgs} args - Arguments to find a Categorias
     * @example
     * // Get one Categorias
     * const categorias = await prisma.categorias.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoriasFindFirstArgs>(args?: SelectSubset<T, CategoriasFindFirstArgs<ExtArgs>>): Prisma__CategoriasClient<$Result.GetResult<Prisma.$CategoriasPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Categorias that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriasFindFirstOrThrowArgs} args - Arguments to find a Categorias
     * @example
     * // Get one Categorias
     * const categorias = await prisma.categorias.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoriasFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoriasFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoriasClient<$Result.GetResult<Prisma.$CategoriasPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Categorias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriasFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categorias
     * const categorias = await prisma.categorias.findMany()
     * 
     * // Get first 10 Categorias
     * const categorias = await prisma.categorias.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoriasWithIdOnly = await prisma.categorias.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategoriasFindManyArgs>(args?: SelectSubset<T, CategoriasFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoriasPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Categorias.
     * @param {CategoriasCreateArgs} args - Arguments to create a Categorias.
     * @example
     * // Create one Categorias
     * const Categorias = await prisma.categorias.create({
     *   data: {
     *     // ... data to create a Categorias
     *   }
     * })
     * 
     */
    create<T extends CategoriasCreateArgs>(args: SelectSubset<T, CategoriasCreateArgs<ExtArgs>>): Prisma__CategoriasClient<$Result.GetResult<Prisma.$CategoriasPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Categorias.
     * @param {CategoriasCreateManyArgs} args - Arguments to create many Categorias.
     * @example
     * // Create many Categorias
     * const categorias = await prisma.categorias.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoriasCreateManyArgs>(args?: SelectSubset<T, CategoriasCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Categorias.
     * @param {CategoriasDeleteArgs} args - Arguments to delete one Categorias.
     * @example
     * // Delete one Categorias
     * const Categorias = await prisma.categorias.delete({
     *   where: {
     *     // ... filter to delete one Categorias
     *   }
     * })
     * 
     */
    delete<T extends CategoriasDeleteArgs>(args: SelectSubset<T, CategoriasDeleteArgs<ExtArgs>>): Prisma__CategoriasClient<$Result.GetResult<Prisma.$CategoriasPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Categorias.
     * @param {CategoriasUpdateArgs} args - Arguments to update one Categorias.
     * @example
     * // Update one Categorias
     * const categorias = await prisma.categorias.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoriasUpdateArgs>(args: SelectSubset<T, CategoriasUpdateArgs<ExtArgs>>): Prisma__CategoriasClient<$Result.GetResult<Prisma.$CategoriasPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Categorias.
     * @param {CategoriasDeleteManyArgs} args - Arguments to filter Categorias to delete.
     * @example
     * // Delete a few Categorias
     * const { count } = await prisma.categorias.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoriasDeleteManyArgs>(args?: SelectSubset<T, CategoriasDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categorias
     * const categorias = await prisma.categorias.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoriasUpdateManyArgs>(args: SelectSubset<T, CategoriasUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Categorias.
     * @param {CategoriasUpsertArgs} args - Arguments to update or create a Categorias.
     * @example
     * // Update or create a Categorias
     * const categorias = await prisma.categorias.upsert({
     *   create: {
     *     // ... data to create a Categorias
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Categorias we want to update
     *   }
     * })
     */
    upsert<T extends CategoriasUpsertArgs>(args: SelectSubset<T, CategoriasUpsertArgs<ExtArgs>>): Prisma__CategoriasClient<$Result.GetResult<Prisma.$CategoriasPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriasCountArgs} args - Arguments to filter Categorias to count.
     * @example
     * // Count the number of Categorias
     * const count = await prisma.categorias.count({
     *   where: {
     *     // ... the filter for the Categorias we want to count
     *   }
     * })
    **/
    count<T extends CategoriasCountArgs>(
      args?: Subset<T, CategoriasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoriasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoriasAggregateArgs>(args: Subset<T, CategoriasAggregateArgs>): Prisma.PrismaPromise<GetCategoriasAggregateType<T>>

    /**
     * Group by Categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoriasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoriasGroupByArgs['orderBy'] }
        : { orderBy?: CategoriasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoriasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoriasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Categorias model
   */
  readonly fields: CategoriasFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Categorias.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoriasClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ProdutoCategoria<T extends Categorias$ProdutoCategoriaArgs<ExtArgs> = {}>(args?: Subset<T, Categorias$ProdutoCategoriaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProdutoCategoriaPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Categorias model
   */ 
  interface CategoriasFieldRefs {
    readonly id: FieldRef<"Categorias", 'Int'>
    readonly categoria_nome: FieldRef<"Categorias", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Categorias findUnique
   */
  export type CategoriasFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorias
     */
    select?: CategoriasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriasInclude<ExtArgs> | null
    /**
     * Filter, which Categorias to fetch.
     */
    where: CategoriasWhereUniqueInput
  }

  /**
   * Categorias findUniqueOrThrow
   */
  export type CategoriasFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorias
     */
    select?: CategoriasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriasInclude<ExtArgs> | null
    /**
     * Filter, which Categorias to fetch.
     */
    where: CategoriasWhereUniqueInput
  }

  /**
   * Categorias findFirst
   */
  export type CategoriasFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorias
     */
    select?: CategoriasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriasInclude<ExtArgs> | null
    /**
     * Filter, which Categorias to fetch.
     */
    where?: CategoriasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categorias to fetch.
     */
    orderBy?: CategoriasOrderByWithRelationInput | CategoriasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categorias.
     */
    cursor?: CategoriasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categorias.
     */
    distinct?: CategoriasScalarFieldEnum | CategoriasScalarFieldEnum[]
  }

  /**
   * Categorias findFirstOrThrow
   */
  export type CategoriasFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorias
     */
    select?: CategoriasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriasInclude<ExtArgs> | null
    /**
     * Filter, which Categorias to fetch.
     */
    where?: CategoriasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categorias to fetch.
     */
    orderBy?: CategoriasOrderByWithRelationInput | CategoriasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categorias.
     */
    cursor?: CategoriasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categorias.
     */
    distinct?: CategoriasScalarFieldEnum | CategoriasScalarFieldEnum[]
  }

  /**
   * Categorias findMany
   */
  export type CategoriasFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorias
     */
    select?: CategoriasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriasInclude<ExtArgs> | null
    /**
     * Filter, which Categorias to fetch.
     */
    where?: CategoriasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categorias to fetch.
     */
    orderBy?: CategoriasOrderByWithRelationInput | CategoriasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categorias.
     */
    cursor?: CategoriasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categorias.
     */
    skip?: number
    distinct?: CategoriasScalarFieldEnum | CategoriasScalarFieldEnum[]
  }

  /**
   * Categorias create
   */
  export type CategoriasCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorias
     */
    select?: CategoriasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriasInclude<ExtArgs> | null
    /**
     * The data needed to create a Categorias.
     */
    data?: XOR<CategoriasCreateInput, CategoriasUncheckedCreateInput>
  }

  /**
   * Categorias createMany
   */
  export type CategoriasCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categorias.
     */
    data: CategoriasCreateManyInput | CategoriasCreateManyInput[]
  }

  /**
   * Categorias update
   */
  export type CategoriasUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorias
     */
    select?: CategoriasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriasInclude<ExtArgs> | null
    /**
     * The data needed to update a Categorias.
     */
    data: XOR<CategoriasUpdateInput, CategoriasUncheckedUpdateInput>
    /**
     * Choose, which Categorias to update.
     */
    where: CategoriasWhereUniqueInput
  }

  /**
   * Categorias updateMany
   */
  export type CategoriasUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categorias.
     */
    data: XOR<CategoriasUpdateManyMutationInput, CategoriasUncheckedUpdateManyInput>
    /**
     * Filter which Categorias to update
     */
    where?: CategoriasWhereInput
  }

  /**
   * Categorias upsert
   */
  export type CategoriasUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorias
     */
    select?: CategoriasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriasInclude<ExtArgs> | null
    /**
     * The filter to search for the Categorias to update in case it exists.
     */
    where: CategoriasWhereUniqueInput
    /**
     * In case the Categorias found by the `where` argument doesn't exist, create a new Categorias with this data.
     */
    create: XOR<CategoriasCreateInput, CategoriasUncheckedCreateInput>
    /**
     * In case the Categorias was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoriasUpdateInput, CategoriasUncheckedUpdateInput>
  }

  /**
   * Categorias delete
   */
  export type CategoriasDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorias
     */
    select?: CategoriasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriasInclude<ExtArgs> | null
    /**
     * Filter which Categorias to delete.
     */
    where: CategoriasWhereUniqueInput
  }

  /**
   * Categorias deleteMany
   */
  export type CategoriasDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categorias to delete
     */
    where?: CategoriasWhereInput
  }

  /**
   * Categorias.ProdutoCategoria
   */
  export type Categorias$ProdutoCategoriaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoCategoria
     */
    select?: ProdutoCategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoCategoriaInclude<ExtArgs> | null
    where?: ProdutoCategoriaWhereInput
    orderBy?: ProdutoCategoriaOrderByWithRelationInput | ProdutoCategoriaOrderByWithRelationInput[]
    cursor?: ProdutoCategoriaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProdutoCategoriaScalarFieldEnum | ProdutoCategoriaScalarFieldEnum[]
  }

  /**
   * Categorias without action
   */
  export type CategoriasDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorias
     */
    select?: CategoriasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriasInclude<ExtArgs> | null
  }


  /**
   * Model Pedidos
   */

  export type AggregatePedidos = {
    _count: PedidosCountAggregateOutputType | null
    _avg: PedidosAvgAggregateOutputType | null
    _sum: PedidosSumAggregateOutputType | null
    _min: PedidosMinAggregateOutputType | null
    _max: PedidosMaxAggregateOutputType | null
  }

  export type PedidosAvgAggregateOutputType = {
    id: number | null
    usuario_id: number | null
    total: Decimal | null
  }

  export type PedidosSumAggregateOutputType = {
    id: number | null
    usuario_id: number | null
    total: Decimal | null
  }

  export type PedidosMinAggregateOutputType = {
    id: number | null
    usuario_id: number | null
    total: Decimal | null
    data: Date | null
  }

  export type PedidosMaxAggregateOutputType = {
    id: number | null
    usuario_id: number | null
    total: Decimal | null
    data: Date | null
  }

  export type PedidosCountAggregateOutputType = {
    id: number
    usuario_id: number
    total: number
    data: number
    _all: number
  }


  export type PedidosAvgAggregateInputType = {
    id?: true
    usuario_id?: true
    total?: true
  }

  export type PedidosSumAggregateInputType = {
    id?: true
    usuario_id?: true
    total?: true
  }

  export type PedidosMinAggregateInputType = {
    id?: true
    usuario_id?: true
    total?: true
    data?: true
  }

  export type PedidosMaxAggregateInputType = {
    id?: true
    usuario_id?: true
    total?: true
    data?: true
  }

  export type PedidosCountAggregateInputType = {
    id?: true
    usuario_id?: true
    total?: true
    data?: true
    _all?: true
  }

  export type PedidosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pedidos to aggregate.
     */
    where?: PedidosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pedidos to fetch.
     */
    orderBy?: PedidosOrderByWithRelationInput | PedidosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PedidosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pedidos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pedidos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Pedidos
    **/
    _count?: true | PedidosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PedidosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PedidosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PedidosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PedidosMaxAggregateInputType
  }

  export type GetPedidosAggregateType<T extends PedidosAggregateArgs> = {
        [P in keyof T & keyof AggregatePedidos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePedidos[P]>
      : GetScalarType<T[P], AggregatePedidos[P]>
  }




  export type PedidosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PedidosWhereInput
    orderBy?: PedidosOrderByWithAggregationInput | PedidosOrderByWithAggregationInput[]
    by: PedidosScalarFieldEnum[] | PedidosScalarFieldEnum
    having?: PedidosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PedidosCountAggregateInputType | true
    _avg?: PedidosAvgAggregateInputType
    _sum?: PedidosSumAggregateInputType
    _min?: PedidosMinAggregateInputType
    _max?: PedidosMaxAggregateInputType
  }

  export type PedidosGroupByOutputType = {
    id: number
    usuario_id: number | null
    total: Decimal | null
    data: Date | null
    _count: PedidosCountAggregateOutputType | null
    _avg: PedidosAvgAggregateOutputType | null
    _sum: PedidosSumAggregateOutputType | null
    _min: PedidosMinAggregateOutputType | null
    _max: PedidosMaxAggregateOutputType | null
  }

  type GetPedidosGroupByPayload<T extends PedidosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PedidosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PedidosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PedidosGroupByOutputType[P]>
            : GetScalarType<T[P], PedidosGroupByOutputType[P]>
        }
      >
    >


  export type PedidosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuario_id?: boolean
    total?: boolean
    data?: boolean
    Carrinho?: boolean | Pedidos$CarrinhoArgs<ExtArgs>
    Usuarios?: boolean | Pedidos$UsuariosArgs<ExtArgs>
    _count?: boolean | PedidosCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pedidos"]>


  export type PedidosSelectScalar = {
    id?: boolean
    usuario_id?: boolean
    total?: boolean
    data?: boolean
  }

  export type PedidosInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Carrinho?: boolean | Pedidos$CarrinhoArgs<ExtArgs>
    Usuarios?: boolean | Pedidos$UsuariosArgs<ExtArgs>
    _count?: boolean | PedidosCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $PedidosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Pedidos"
    objects: {
      Carrinho: Prisma.$CarrinhoPayload<ExtArgs>[]
      Usuarios: Prisma.$UsuariosPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      usuario_id: number | null
      total: Prisma.Decimal | null
      data: Date | null
    }, ExtArgs["result"]["pedidos"]>
    composites: {}
  }

  type PedidosGetPayload<S extends boolean | null | undefined | PedidosDefaultArgs> = $Result.GetResult<Prisma.$PedidosPayload, S>

  type PedidosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PedidosFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PedidosCountAggregateInputType | true
    }

  export interface PedidosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Pedidos'], meta: { name: 'Pedidos' } }
    /**
     * Find zero or one Pedidos that matches the filter.
     * @param {PedidosFindUniqueArgs} args - Arguments to find a Pedidos
     * @example
     * // Get one Pedidos
     * const pedidos = await prisma.pedidos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PedidosFindUniqueArgs>(args: SelectSubset<T, PedidosFindUniqueArgs<ExtArgs>>): Prisma__PedidosClient<$Result.GetResult<Prisma.$PedidosPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Pedidos that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PedidosFindUniqueOrThrowArgs} args - Arguments to find a Pedidos
     * @example
     * // Get one Pedidos
     * const pedidos = await prisma.pedidos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PedidosFindUniqueOrThrowArgs>(args: SelectSubset<T, PedidosFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PedidosClient<$Result.GetResult<Prisma.$PedidosPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Pedidos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidosFindFirstArgs} args - Arguments to find a Pedidos
     * @example
     * // Get one Pedidos
     * const pedidos = await prisma.pedidos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PedidosFindFirstArgs>(args?: SelectSubset<T, PedidosFindFirstArgs<ExtArgs>>): Prisma__PedidosClient<$Result.GetResult<Prisma.$PedidosPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Pedidos that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidosFindFirstOrThrowArgs} args - Arguments to find a Pedidos
     * @example
     * // Get one Pedidos
     * const pedidos = await prisma.pedidos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PedidosFindFirstOrThrowArgs>(args?: SelectSubset<T, PedidosFindFirstOrThrowArgs<ExtArgs>>): Prisma__PedidosClient<$Result.GetResult<Prisma.$PedidosPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Pedidos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidosFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pedidos
     * const pedidos = await prisma.pedidos.findMany()
     * 
     * // Get first 10 Pedidos
     * const pedidos = await prisma.pedidos.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pedidosWithIdOnly = await prisma.pedidos.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PedidosFindManyArgs>(args?: SelectSubset<T, PedidosFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PedidosPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Pedidos.
     * @param {PedidosCreateArgs} args - Arguments to create a Pedidos.
     * @example
     * // Create one Pedidos
     * const Pedidos = await prisma.pedidos.create({
     *   data: {
     *     // ... data to create a Pedidos
     *   }
     * })
     * 
     */
    create<T extends PedidosCreateArgs>(args: SelectSubset<T, PedidosCreateArgs<ExtArgs>>): Prisma__PedidosClient<$Result.GetResult<Prisma.$PedidosPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Pedidos.
     * @param {PedidosCreateManyArgs} args - Arguments to create many Pedidos.
     * @example
     * // Create many Pedidos
     * const pedidos = await prisma.pedidos.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PedidosCreateManyArgs>(args?: SelectSubset<T, PedidosCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Pedidos.
     * @param {PedidosDeleteArgs} args - Arguments to delete one Pedidos.
     * @example
     * // Delete one Pedidos
     * const Pedidos = await prisma.pedidos.delete({
     *   where: {
     *     // ... filter to delete one Pedidos
     *   }
     * })
     * 
     */
    delete<T extends PedidosDeleteArgs>(args: SelectSubset<T, PedidosDeleteArgs<ExtArgs>>): Prisma__PedidosClient<$Result.GetResult<Prisma.$PedidosPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Pedidos.
     * @param {PedidosUpdateArgs} args - Arguments to update one Pedidos.
     * @example
     * // Update one Pedidos
     * const pedidos = await prisma.pedidos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PedidosUpdateArgs>(args: SelectSubset<T, PedidosUpdateArgs<ExtArgs>>): Prisma__PedidosClient<$Result.GetResult<Prisma.$PedidosPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Pedidos.
     * @param {PedidosDeleteManyArgs} args - Arguments to filter Pedidos to delete.
     * @example
     * // Delete a few Pedidos
     * const { count } = await prisma.pedidos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PedidosDeleteManyArgs>(args?: SelectSubset<T, PedidosDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pedidos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pedidos
     * const pedidos = await prisma.pedidos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PedidosUpdateManyArgs>(args: SelectSubset<T, PedidosUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Pedidos.
     * @param {PedidosUpsertArgs} args - Arguments to update or create a Pedidos.
     * @example
     * // Update or create a Pedidos
     * const pedidos = await prisma.pedidos.upsert({
     *   create: {
     *     // ... data to create a Pedidos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pedidos we want to update
     *   }
     * })
     */
    upsert<T extends PedidosUpsertArgs>(args: SelectSubset<T, PedidosUpsertArgs<ExtArgs>>): Prisma__PedidosClient<$Result.GetResult<Prisma.$PedidosPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Pedidos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidosCountArgs} args - Arguments to filter Pedidos to count.
     * @example
     * // Count the number of Pedidos
     * const count = await prisma.pedidos.count({
     *   where: {
     *     // ... the filter for the Pedidos we want to count
     *   }
     * })
    **/
    count<T extends PedidosCountArgs>(
      args?: Subset<T, PedidosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PedidosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pedidos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PedidosAggregateArgs>(args: Subset<T, PedidosAggregateArgs>): Prisma.PrismaPromise<GetPedidosAggregateType<T>>

    /**
     * Group by Pedidos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PedidosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PedidosGroupByArgs['orderBy'] }
        : { orderBy?: PedidosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PedidosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPedidosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Pedidos model
   */
  readonly fields: PedidosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Pedidos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PedidosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Carrinho<T extends Pedidos$CarrinhoArgs<ExtArgs> = {}>(args?: Subset<T, Pedidos$CarrinhoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CarrinhoPayload<ExtArgs>, T, "findMany"> | Null>
    Usuarios<T extends Pedidos$UsuariosArgs<ExtArgs> = {}>(args?: Subset<T, Pedidos$UsuariosArgs<ExtArgs>>): Prisma__UsuariosClient<$Result.GetResult<Prisma.$UsuariosPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Pedidos model
   */ 
  interface PedidosFieldRefs {
    readonly id: FieldRef<"Pedidos", 'Int'>
    readonly usuario_id: FieldRef<"Pedidos", 'Int'>
    readonly total: FieldRef<"Pedidos", 'Decimal'>
    readonly data: FieldRef<"Pedidos", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Pedidos findUnique
   */
  export type PedidosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedidos
     */
    select?: PedidosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PedidosInclude<ExtArgs> | null
    /**
     * Filter, which Pedidos to fetch.
     */
    where: PedidosWhereUniqueInput
  }

  /**
   * Pedidos findUniqueOrThrow
   */
  export type PedidosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedidos
     */
    select?: PedidosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PedidosInclude<ExtArgs> | null
    /**
     * Filter, which Pedidos to fetch.
     */
    where: PedidosWhereUniqueInput
  }

  /**
   * Pedidos findFirst
   */
  export type PedidosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedidos
     */
    select?: PedidosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PedidosInclude<ExtArgs> | null
    /**
     * Filter, which Pedidos to fetch.
     */
    where?: PedidosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pedidos to fetch.
     */
    orderBy?: PedidosOrderByWithRelationInput | PedidosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pedidos.
     */
    cursor?: PedidosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pedidos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pedidos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pedidos.
     */
    distinct?: PedidosScalarFieldEnum | PedidosScalarFieldEnum[]
  }

  /**
   * Pedidos findFirstOrThrow
   */
  export type PedidosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedidos
     */
    select?: PedidosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PedidosInclude<ExtArgs> | null
    /**
     * Filter, which Pedidos to fetch.
     */
    where?: PedidosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pedidos to fetch.
     */
    orderBy?: PedidosOrderByWithRelationInput | PedidosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pedidos.
     */
    cursor?: PedidosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pedidos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pedidos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pedidos.
     */
    distinct?: PedidosScalarFieldEnum | PedidosScalarFieldEnum[]
  }

  /**
   * Pedidos findMany
   */
  export type PedidosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedidos
     */
    select?: PedidosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PedidosInclude<ExtArgs> | null
    /**
     * Filter, which Pedidos to fetch.
     */
    where?: PedidosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pedidos to fetch.
     */
    orderBy?: PedidosOrderByWithRelationInput | PedidosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Pedidos.
     */
    cursor?: PedidosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pedidos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pedidos.
     */
    skip?: number
    distinct?: PedidosScalarFieldEnum | PedidosScalarFieldEnum[]
  }

  /**
   * Pedidos create
   */
  export type PedidosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedidos
     */
    select?: PedidosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PedidosInclude<ExtArgs> | null
    /**
     * The data needed to create a Pedidos.
     */
    data?: XOR<PedidosCreateInput, PedidosUncheckedCreateInput>
  }

  /**
   * Pedidos createMany
   */
  export type PedidosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Pedidos.
     */
    data: PedidosCreateManyInput | PedidosCreateManyInput[]
  }

  /**
   * Pedidos update
   */
  export type PedidosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedidos
     */
    select?: PedidosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PedidosInclude<ExtArgs> | null
    /**
     * The data needed to update a Pedidos.
     */
    data: XOR<PedidosUpdateInput, PedidosUncheckedUpdateInput>
    /**
     * Choose, which Pedidos to update.
     */
    where: PedidosWhereUniqueInput
  }

  /**
   * Pedidos updateMany
   */
  export type PedidosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Pedidos.
     */
    data: XOR<PedidosUpdateManyMutationInput, PedidosUncheckedUpdateManyInput>
    /**
     * Filter which Pedidos to update
     */
    where?: PedidosWhereInput
  }

  /**
   * Pedidos upsert
   */
  export type PedidosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedidos
     */
    select?: PedidosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PedidosInclude<ExtArgs> | null
    /**
     * The filter to search for the Pedidos to update in case it exists.
     */
    where: PedidosWhereUniqueInput
    /**
     * In case the Pedidos found by the `where` argument doesn't exist, create a new Pedidos with this data.
     */
    create: XOR<PedidosCreateInput, PedidosUncheckedCreateInput>
    /**
     * In case the Pedidos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PedidosUpdateInput, PedidosUncheckedUpdateInput>
  }

  /**
   * Pedidos delete
   */
  export type PedidosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedidos
     */
    select?: PedidosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PedidosInclude<ExtArgs> | null
    /**
     * Filter which Pedidos to delete.
     */
    where: PedidosWhereUniqueInput
  }

  /**
   * Pedidos deleteMany
   */
  export type PedidosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pedidos to delete
     */
    where?: PedidosWhereInput
  }

  /**
   * Pedidos.Carrinho
   */
  export type Pedidos$CarrinhoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrinho
     */
    select?: CarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarrinhoInclude<ExtArgs> | null
    where?: CarrinhoWhereInput
    orderBy?: CarrinhoOrderByWithRelationInput | CarrinhoOrderByWithRelationInput[]
    cursor?: CarrinhoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CarrinhoScalarFieldEnum | CarrinhoScalarFieldEnum[]
  }

  /**
   * Pedidos.Usuarios
   */
  export type Pedidos$UsuariosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuarios
     */
    select?: UsuariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuariosInclude<ExtArgs> | null
    where?: UsuariosWhereInput
  }

  /**
   * Pedidos without action
   */
  export type PedidosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedidos
     */
    select?: PedidosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PedidosInclude<ExtArgs> | null
  }


  /**
   * Model ProdutoCategoria
   */

  export type AggregateProdutoCategoria = {
    _count: ProdutoCategoriaCountAggregateOutputType | null
    _avg: ProdutoCategoriaAvgAggregateOutputType | null
    _sum: ProdutoCategoriaSumAggregateOutputType | null
    _min: ProdutoCategoriaMinAggregateOutputType | null
    _max: ProdutoCategoriaMaxAggregateOutputType | null
  }

  export type ProdutoCategoriaAvgAggregateOutputType = {
    produto_id: number | null
    categoria_id: number | null
  }

  export type ProdutoCategoriaSumAggregateOutputType = {
    produto_id: number | null
    categoria_id: number | null
  }

  export type ProdutoCategoriaMinAggregateOutputType = {
    produto_id: number | null
    categoria_id: number | null
  }

  export type ProdutoCategoriaMaxAggregateOutputType = {
    produto_id: number | null
    categoria_id: number | null
  }

  export type ProdutoCategoriaCountAggregateOutputType = {
    produto_id: number
    categoria_id: number
    _all: number
  }


  export type ProdutoCategoriaAvgAggregateInputType = {
    produto_id?: true
    categoria_id?: true
  }

  export type ProdutoCategoriaSumAggregateInputType = {
    produto_id?: true
    categoria_id?: true
  }

  export type ProdutoCategoriaMinAggregateInputType = {
    produto_id?: true
    categoria_id?: true
  }

  export type ProdutoCategoriaMaxAggregateInputType = {
    produto_id?: true
    categoria_id?: true
  }

  export type ProdutoCategoriaCountAggregateInputType = {
    produto_id?: true
    categoria_id?: true
    _all?: true
  }

  export type ProdutoCategoriaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProdutoCategoria to aggregate.
     */
    where?: ProdutoCategoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProdutoCategorias to fetch.
     */
    orderBy?: ProdutoCategoriaOrderByWithRelationInput | ProdutoCategoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProdutoCategoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProdutoCategorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProdutoCategorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProdutoCategorias
    **/
    _count?: true | ProdutoCategoriaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProdutoCategoriaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProdutoCategoriaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProdutoCategoriaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProdutoCategoriaMaxAggregateInputType
  }

  export type GetProdutoCategoriaAggregateType<T extends ProdutoCategoriaAggregateArgs> = {
        [P in keyof T & keyof AggregateProdutoCategoria]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProdutoCategoria[P]>
      : GetScalarType<T[P], AggregateProdutoCategoria[P]>
  }




  export type ProdutoCategoriaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProdutoCategoriaWhereInput
    orderBy?: ProdutoCategoriaOrderByWithAggregationInput | ProdutoCategoriaOrderByWithAggregationInput[]
    by: ProdutoCategoriaScalarFieldEnum[] | ProdutoCategoriaScalarFieldEnum
    having?: ProdutoCategoriaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProdutoCategoriaCountAggregateInputType | true
    _avg?: ProdutoCategoriaAvgAggregateInputType
    _sum?: ProdutoCategoriaSumAggregateInputType
    _min?: ProdutoCategoriaMinAggregateInputType
    _max?: ProdutoCategoriaMaxAggregateInputType
  }

  export type ProdutoCategoriaGroupByOutputType = {
    produto_id: number
    categoria_id: number
    _count: ProdutoCategoriaCountAggregateOutputType | null
    _avg: ProdutoCategoriaAvgAggregateOutputType | null
    _sum: ProdutoCategoriaSumAggregateOutputType | null
    _min: ProdutoCategoriaMinAggregateOutputType | null
    _max: ProdutoCategoriaMaxAggregateOutputType | null
  }

  type GetProdutoCategoriaGroupByPayload<T extends ProdutoCategoriaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProdutoCategoriaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProdutoCategoriaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProdutoCategoriaGroupByOutputType[P]>
            : GetScalarType<T[P], ProdutoCategoriaGroupByOutputType[P]>
        }
      >
    >


  export type ProdutoCategoriaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    produto_id?: boolean
    categoria_id?: boolean
    Categorias?: boolean | CategoriasDefaultArgs<ExtArgs>
    Produtos?: boolean | ProdutosDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["produtoCategoria"]>


  export type ProdutoCategoriaSelectScalar = {
    produto_id?: boolean
    categoria_id?: boolean
  }

  export type ProdutoCategoriaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Categorias?: boolean | CategoriasDefaultArgs<ExtArgs>
    Produtos?: boolean | ProdutosDefaultArgs<ExtArgs>
  }

  export type $ProdutoCategoriaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProdutoCategoria"
    objects: {
      Categorias: Prisma.$CategoriasPayload<ExtArgs>
      Produtos: Prisma.$ProdutosPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      produto_id: number
      categoria_id: number
    }, ExtArgs["result"]["produtoCategoria"]>
    composites: {}
  }

  type ProdutoCategoriaGetPayload<S extends boolean | null | undefined | ProdutoCategoriaDefaultArgs> = $Result.GetResult<Prisma.$ProdutoCategoriaPayload, S>

  type ProdutoCategoriaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProdutoCategoriaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProdutoCategoriaCountAggregateInputType | true
    }

  export interface ProdutoCategoriaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProdutoCategoria'], meta: { name: 'ProdutoCategoria' } }
    /**
     * Find zero or one ProdutoCategoria that matches the filter.
     * @param {ProdutoCategoriaFindUniqueArgs} args - Arguments to find a ProdutoCategoria
     * @example
     * // Get one ProdutoCategoria
     * const produtoCategoria = await prisma.produtoCategoria.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProdutoCategoriaFindUniqueArgs>(args: SelectSubset<T, ProdutoCategoriaFindUniqueArgs<ExtArgs>>): Prisma__ProdutoCategoriaClient<$Result.GetResult<Prisma.$ProdutoCategoriaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ProdutoCategoria that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProdutoCategoriaFindUniqueOrThrowArgs} args - Arguments to find a ProdutoCategoria
     * @example
     * // Get one ProdutoCategoria
     * const produtoCategoria = await prisma.produtoCategoria.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProdutoCategoriaFindUniqueOrThrowArgs>(args: SelectSubset<T, ProdutoCategoriaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProdutoCategoriaClient<$Result.GetResult<Prisma.$ProdutoCategoriaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ProdutoCategoria that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoCategoriaFindFirstArgs} args - Arguments to find a ProdutoCategoria
     * @example
     * // Get one ProdutoCategoria
     * const produtoCategoria = await prisma.produtoCategoria.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProdutoCategoriaFindFirstArgs>(args?: SelectSubset<T, ProdutoCategoriaFindFirstArgs<ExtArgs>>): Prisma__ProdutoCategoriaClient<$Result.GetResult<Prisma.$ProdutoCategoriaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ProdutoCategoria that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoCategoriaFindFirstOrThrowArgs} args - Arguments to find a ProdutoCategoria
     * @example
     * // Get one ProdutoCategoria
     * const produtoCategoria = await prisma.produtoCategoria.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProdutoCategoriaFindFirstOrThrowArgs>(args?: SelectSubset<T, ProdutoCategoriaFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProdutoCategoriaClient<$Result.GetResult<Prisma.$ProdutoCategoriaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ProdutoCategorias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoCategoriaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProdutoCategorias
     * const produtoCategorias = await prisma.produtoCategoria.findMany()
     * 
     * // Get first 10 ProdutoCategorias
     * const produtoCategorias = await prisma.produtoCategoria.findMany({ take: 10 })
     * 
     * // Only select the `produto_id`
     * const produtoCategoriaWithProduto_idOnly = await prisma.produtoCategoria.findMany({ select: { produto_id: true } })
     * 
     */
    findMany<T extends ProdutoCategoriaFindManyArgs>(args?: SelectSubset<T, ProdutoCategoriaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProdutoCategoriaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ProdutoCategoria.
     * @param {ProdutoCategoriaCreateArgs} args - Arguments to create a ProdutoCategoria.
     * @example
     * // Create one ProdutoCategoria
     * const ProdutoCategoria = await prisma.produtoCategoria.create({
     *   data: {
     *     // ... data to create a ProdutoCategoria
     *   }
     * })
     * 
     */
    create<T extends ProdutoCategoriaCreateArgs>(args: SelectSubset<T, ProdutoCategoriaCreateArgs<ExtArgs>>): Prisma__ProdutoCategoriaClient<$Result.GetResult<Prisma.$ProdutoCategoriaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ProdutoCategorias.
     * @param {ProdutoCategoriaCreateManyArgs} args - Arguments to create many ProdutoCategorias.
     * @example
     * // Create many ProdutoCategorias
     * const produtoCategoria = await prisma.produtoCategoria.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProdutoCategoriaCreateManyArgs>(args?: SelectSubset<T, ProdutoCategoriaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ProdutoCategoria.
     * @param {ProdutoCategoriaDeleteArgs} args - Arguments to delete one ProdutoCategoria.
     * @example
     * // Delete one ProdutoCategoria
     * const ProdutoCategoria = await prisma.produtoCategoria.delete({
     *   where: {
     *     // ... filter to delete one ProdutoCategoria
     *   }
     * })
     * 
     */
    delete<T extends ProdutoCategoriaDeleteArgs>(args: SelectSubset<T, ProdutoCategoriaDeleteArgs<ExtArgs>>): Prisma__ProdutoCategoriaClient<$Result.GetResult<Prisma.$ProdutoCategoriaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ProdutoCategoria.
     * @param {ProdutoCategoriaUpdateArgs} args - Arguments to update one ProdutoCategoria.
     * @example
     * // Update one ProdutoCategoria
     * const produtoCategoria = await prisma.produtoCategoria.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProdutoCategoriaUpdateArgs>(args: SelectSubset<T, ProdutoCategoriaUpdateArgs<ExtArgs>>): Prisma__ProdutoCategoriaClient<$Result.GetResult<Prisma.$ProdutoCategoriaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ProdutoCategorias.
     * @param {ProdutoCategoriaDeleteManyArgs} args - Arguments to filter ProdutoCategorias to delete.
     * @example
     * // Delete a few ProdutoCategorias
     * const { count } = await prisma.produtoCategoria.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProdutoCategoriaDeleteManyArgs>(args?: SelectSubset<T, ProdutoCategoriaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProdutoCategorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoCategoriaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProdutoCategorias
     * const produtoCategoria = await prisma.produtoCategoria.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProdutoCategoriaUpdateManyArgs>(args: SelectSubset<T, ProdutoCategoriaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProdutoCategoria.
     * @param {ProdutoCategoriaUpsertArgs} args - Arguments to update or create a ProdutoCategoria.
     * @example
     * // Update or create a ProdutoCategoria
     * const produtoCategoria = await prisma.produtoCategoria.upsert({
     *   create: {
     *     // ... data to create a ProdutoCategoria
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProdutoCategoria we want to update
     *   }
     * })
     */
    upsert<T extends ProdutoCategoriaUpsertArgs>(args: SelectSubset<T, ProdutoCategoriaUpsertArgs<ExtArgs>>): Prisma__ProdutoCategoriaClient<$Result.GetResult<Prisma.$ProdutoCategoriaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ProdutoCategorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoCategoriaCountArgs} args - Arguments to filter ProdutoCategorias to count.
     * @example
     * // Count the number of ProdutoCategorias
     * const count = await prisma.produtoCategoria.count({
     *   where: {
     *     // ... the filter for the ProdutoCategorias we want to count
     *   }
     * })
    **/
    count<T extends ProdutoCategoriaCountArgs>(
      args?: Subset<T, ProdutoCategoriaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProdutoCategoriaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProdutoCategoria.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoCategoriaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProdutoCategoriaAggregateArgs>(args: Subset<T, ProdutoCategoriaAggregateArgs>): Prisma.PrismaPromise<GetProdutoCategoriaAggregateType<T>>

    /**
     * Group by ProdutoCategoria.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoCategoriaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProdutoCategoriaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProdutoCategoriaGroupByArgs['orderBy'] }
        : { orderBy?: ProdutoCategoriaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProdutoCategoriaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProdutoCategoriaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProdutoCategoria model
   */
  readonly fields: ProdutoCategoriaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProdutoCategoria.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProdutoCategoriaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Categorias<T extends CategoriasDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoriasDefaultArgs<ExtArgs>>): Prisma__CategoriasClient<$Result.GetResult<Prisma.$CategoriasPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    Produtos<T extends ProdutosDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProdutosDefaultArgs<ExtArgs>>): Prisma__ProdutosClient<$Result.GetResult<Prisma.$ProdutosPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProdutoCategoria model
   */ 
  interface ProdutoCategoriaFieldRefs {
    readonly produto_id: FieldRef<"ProdutoCategoria", 'Int'>
    readonly categoria_id: FieldRef<"ProdutoCategoria", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ProdutoCategoria findUnique
   */
  export type ProdutoCategoriaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoCategoria
     */
    select?: ProdutoCategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoCategoriaInclude<ExtArgs> | null
    /**
     * Filter, which ProdutoCategoria to fetch.
     */
    where: ProdutoCategoriaWhereUniqueInput
  }

  /**
   * ProdutoCategoria findUniqueOrThrow
   */
  export type ProdutoCategoriaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoCategoria
     */
    select?: ProdutoCategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoCategoriaInclude<ExtArgs> | null
    /**
     * Filter, which ProdutoCategoria to fetch.
     */
    where: ProdutoCategoriaWhereUniqueInput
  }

  /**
   * ProdutoCategoria findFirst
   */
  export type ProdutoCategoriaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoCategoria
     */
    select?: ProdutoCategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoCategoriaInclude<ExtArgs> | null
    /**
     * Filter, which ProdutoCategoria to fetch.
     */
    where?: ProdutoCategoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProdutoCategorias to fetch.
     */
    orderBy?: ProdutoCategoriaOrderByWithRelationInput | ProdutoCategoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProdutoCategorias.
     */
    cursor?: ProdutoCategoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProdutoCategorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProdutoCategorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProdutoCategorias.
     */
    distinct?: ProdutoCategoriaScalarFieldEnum | ProdutoCategoriaScalarFieldEnum[]
  }

  /**
   * ProdutoCategoria findFirstOrThrow
   */
  export type ProdutoCategoriaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoCategoria
     */
    select?: ProdutoCategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoCategoriaInclude<ExtArgs> | null
    /**
     * Filter, which ProdutoCategoria to fetch.
     */
    where?: ProdutoCategoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProdutoCategorias to fetch.
     */
    orderBy?: ProdutoCategoriaOrderByWithRelationInput | ProdutoCategoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProdutoCategorias.
     */
    cursor?: ProdutoCategoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProdutoCategorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProdutoCategorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProdutoCategorias.
     */
    distinct?: ProdutoCategoriaScalarFieldEnum | ProdutoCategoriaScalarFieldEnum[]
  }

  /**
   * ProdutoCategoria findMany
   */
  export type ProdutoCategoriaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoCategoria
     */
    select?: ProdutoCategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoCategoriaInclude<ExtArgs> | null
    /**
     * Filter, which ProdutoCategorias to fetch.
     */
    where?: ProdutoCategoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProdutoCategorias to fetch.
     */
    orderBy?: ProdutoCategoriaOrderByWithRelationInput | ProdutoCategoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProdutoCategorias.
     */
    cursor?: ProdutoCategoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProdutoCategorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProdutoCategorias.
     */
    skip?: number
    distinct?: ProdutoCategoriaScalarFieldEnum | ProdutoCategoriaScalarFieldEnum[]
  }

  /**
   * ProdutoCategoria create
   */
  export type ProdutoCategoriaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoCategoria
     */
    select?: ProdutoCategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoCategoriaInclude<ExtArgs> | null
    /**
     * The data needed to create a ProdutoCategoria.
     */
    data: XOR<ProdutoCategoriaCreateInput, ProdutoCategoriaUncheckedCreateInput>
  }

  /**
   * ProdutoCategoria createMany
   */
  export type ProdutoCategoriaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProdutoCategorias.
     */
    data: ProdutoCategoriaCreateManyInput | ProdutoCategoriaCreateManyInput[]
  }

  /**
   * ProdutoCategoria update
   */
  export type ProdutoCategoriaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoCategoria
     */
    select?: ProdutoCategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoCategoriaInclude<ExtArgs> | null
    /**
     * The data needed to update a ProdutoCategoria.
     */
    data: XOR<ProdutoCategoriaUpdateInput, ProdutoCategoriaUncheckedUpdateInput>
    /**
     * Choose, which ProdutoCategoria to update.
     */
    where: ProdutoCategoriaWhereUniqueInput
  }

  /**
   * ProdutoCategoria updateMany
   */
  export type ProdutoCategoriaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProdutoCategorias.
     */
    data: XOR<ProdutoCategoriaUpdateManyMutationInput, ProdutoCategoriaUncheckedUpdateManyInput>
    /**
     * Filter which ProdutoCategorias to update
     */
    where?: ProdutoCategoriaWhereInput
  }

  /**
   * ProdutoCategoria upsert
   */
  export type ProdutoCategoriaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoCategoria
     */
    select?: ProdutoCategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoCategoriaInclude<ExtArgs> | null
    /**
     * The filter to search for the ProdutoCategoria to update in case it exists.
     */
    where: ProdutoCategoriaWhereUniqueInput
    /**
     * In case the ProdutoCategoria found by the `where` argument doesn't exist, create a new ProdutoCategoria with this data.
     */
    create: XOR<ProdutoCategoriaCreateInput, ProdutoCategoriaUncheckedCreateInput>
    /**
     * In case the ProdutoCategoria was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProdutoCategoriaUpdateInput, ProdutoCategoriaUncheckedUpdateInput>
  }

  /**
   * ProdutoCategoria delete
   */
  export type ProdutoCategoriaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoCategoria
     */
    select?: ProdutoCategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoCategoriaInclude<ExtArgs> | null
    /**
     * Filter which ProdutoCategoria to delete.
     */
    where: ProdutoCategoriaWhereUniqueInput
  }

  /**
   * ProdutoCategoria deleteMany
   */
  export type ProdutoCategoriaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProdutoCategorias to delete
     */
    where?: ProdutoCategoriaWhereInput
  }

  /**
   * ProdutoCategoria without action
   */
  export type ProdutoCategoriaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoCategoria
     */
    select?: ProdutoCategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoCategoriaInclude<ExtArgs> | null
  }


  /**
   * Model Produtos
   */

  export type AggregateProdutos = {
    _count: ProdutosCountAggregateOutputType | null
    _avg: ProdutosAvgAggregateOutputType | null
    _sum: ProdutosSumAggregateOutputType | null
    _min: ProdutosMinAggregateOutputType | null
    _max: ProdutosMaxAggregateOutputType | null
  }

  export type ProdutosAvgAggregateOutputType = {
    id: number | null
    price: Decimal | null
  }

  export type ProdutosSumAggregateOutputType = {
    id: number | null
    price: Decimal | null
  }

  export type ProdutosMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    price: Decimal | null
    marca: string | null
    imageUrl: string | null
    category: string | null
  }

  export type ProdutosMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    price: Decimal | null
    marca: string | null
    imageUrl: string | null
    category: string | null
  }

  export type ProdutosCountAggregateOutputType = {
    id: number
    name: number
    description: number
    price: number
    marca: number
    imageUrl: number
    category: number
    _all: number
  }


  export type ProdutosAvgAggregateInputType = {
    id?: true
    price?: true
  }

  export type ProdutosSumAggregateInputType = {
    id?: true
    price?: true
  }

  export type ProdutosMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    price?: true
    marca?: true
    imageUrl?: true
    category?: true
  }

  export type ProdutosMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    price?: true
    marca?: true
    imageUrl?: true
    category?: true
  }

  export type ProdutosCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    price?: true
    marca?: true
    imageUrl?: true
    category?: true
    _all?: true
  }

  export type ProdutosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Produtos to aggregate.
     */
    where?: ProdutosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: ProdutosOrderByWithRelationInput | ProdutosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProdutosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Produtos
    **/
    _count?: true | ProdutosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProdutosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProdutosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProdutosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProdutosMaxAggregateInputType
  }

  export type GetProdutosAggregateType<T extends ProdutosAggregateArgs> = {
        [P in keyof T & keyof AggregateProdutos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProdutos[P]>
      : GetScalarType<T[P], AggregateProdutos[P]>
  }




  export type ProdutosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProdutosWhereInput
    orderBy?: ProdutosOrderByWithAggregationInput | ProdutosOrderByWithAggregationInput[]
    by: ProdutosScalarFieldEnum[] | ProdutosScalarFieldEnum
    having?: ProdutosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProdutosCountAggregateInputType | true
    _avg?: ProdutosAvgAggregateInputType
    _sum?: ProdutosSumAggregateInputType
    _min?: ProdutosMinAggregateInputType
    _max?: ProdutosMaxAggregateInputType
  }

  export type ProdutosGroupByOutputType = {
    id: number
    name: string | null
    description: string | null
    price: Decimal | null
    marca: string | null
    imageUrl: string | null
    category: string | null
    _count: ProdutosCountAggregateOutputType | null
    _avg: ProdutosAvgAggregateOutputType | null
    _sum: ProdutosSumAggregateOutputType | null
    _min: ProdutosMinAggregateOutputType | null
    _max: ProdutosMaxAggregateOutputType | null
  }

  type GetProdutosGroupByPayload<T extends ProdutosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProdutosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProdutosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProdutosGroupByOutputType[P]>
            : GetScalarType<T[P], ProdutosGroupByOutputType[P]>
        }
      >
    >


  export type ProdutosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    price?: boolean
    marca?: boolean
    imageUrl?: boolean
    category?: boolean
    Carrinho?: boolean | Produtos$CarrinhoArgs<ExtArgs>
    ProdutoCategoria?: boolean | Produtos$ProdutoCategoriaArgs<ExtArgs>
    _count?: boolean | ProdutosCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["produtos"]>


  export type ProdutosSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    price?: boolean
    marca?: boolean
    imageUrl?: boolean
    category?: boolean
  }

  export type ProdutosInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Carrinho?: boolean | Produtos$CarrinhoArgs<ExtArgs>
    ProdutoCategoria?: boolean | Produtos$ProdutoCategoriaArgs<ExtArgs>
    _count?: boolean | ProdutosCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ProdutosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Produtos"
    objects: {
      Carrinho: Prisma.$CarrinhoPayload<ExtArgs>[]
      ProdutoCategoria: Prisma.$ProdutoCategoriaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string | null
      description: string | null
      price: Prisma.Decimal | null
      marca: string | null
      imageUrl: string | null
      category: string | null
    }, ExtArgs["result"]["produtos"]>
    composites: {}
  }

  type ProdutosGetPayload<S extends boolean | null | undefined | ProdutosDefaultArgs> = $Result.GetResult<Prisma.$ProdutosPayload, S>

  type ProdutosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProdutosFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProdutosCountAggregateInputType | true
    }

  export interface ProdutosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Produtos'], meta: { name: 'Produtos' } }
    /**
     * Find zero or one Produtos that matches the filter.
     * @param {ProdutosFindUniqueArgs} args - Arguments to find a Produtos
     * @example
     * // Get one Produtos
     * const produtos = await prisma.produtos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProdutosFindUniqueArgs>(args: SelectSubset<T, ProdutosFindUniqueArgs<ExtArgs>>): Prisma__ProdutosClient<$Result.GetResult<Prisma.$ProdutosPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Produtos that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProdutosFindUniqueOrThrowArgs} args - Arguments to find a Produtos
     * @example
     * // Get one Produtos
     * const produtos = await prisma.produtos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProdutosFindUniqueOrThrowArgs>(args: SelectSubset<T, ProdutosFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProdutosClient<$Result.GetResult<Prisma.$ProdutosPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Produtos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutosFindFirstArgs} args - Arguments to find a Produtos
     * @example
     * // Get one Produtos
     * const produtos = await prisma.produtos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProdutosFindFirstArgs>(args?: SelectSubset<T, ProdutosFindFirstArgs<ExtArgs>>): Prisma__ProdutosClient<$Result.GetResult<Prisma.$ProdutosPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Produtos that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutosFindFirstOrThrowArgs} args - Arguments to find a Produtos
     * @example
     * // Get one Produtos
     * const produtos = await prisma.produtos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProdutosFindFirstOrThrowArgs>(args?: SelectSubset<T, ProdutosFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProdutosClient<$Result.GetResult<Prisma.$ProdutosPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Produtos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutosFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Produtos
     * const produtos = await prisma.produtos.findMany()
     * 
     * // Get first 10 Produtos
     * const produtos = await prisma.produtos.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const produtosWithIdOnly = await prisma.produtos.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProdutosFindManyArgs>(args?: SelectSubset<T, ProdutosFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProdutosPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Produtos.
     * @param {ProdutosCreateArgs} args - Arguments to create a Produtos.
     * @example
     * // Create one Produtos
     * const Produtos = await prisma.produtos.create({
     *   data: {
     *     // ... data to create a Produtos
     *   }
     * })
     * 
     */
    create<T extends ProdutosCreateArgs>(args: SelectSubset<T, ProdutosCreateArgs<ExtArgs>>): Prisma__ProdutosClient<$Result.GetResult<Prisma.$ProdutosPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Produtos.
     * @param {ProdutosCreateManyArgs} args - Arguments to create many Produtos.
     * @example
     * // Create many Produtos
     * const produtos = await prisma.produtos.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProdutosCreateManyArgs>(args?: SelectSubset<T, ProdutosCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Produtos.
     * @param {ProdutosDeleteArgs} args - Arguments to delete one Produtos.
     * @example
     * // Delete one Produtos
     * const Produtos = await prisma.produtos.delete({
     *   where: {
     *     // ... filter to delete one Produtos
     *   }
     * })
     * 
     */
    delete<T extends ProdutosDeleteArgs>(args: SelectSubset<T, ProdutosDeleteArgs<ExtArgs>>): Prisma__ProdutosClient<$Result.GetResult<Prisma.$ProdutosPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Produtos.
     * @param {ProdutosUpdateArgs} args - Arguments to update one Produtos.
     * @example
     * // Update one Produtos
     * const produtos = await prisma.produtos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProdutosUpdateArgs>(args: SelectSubset<T, ProdutosUpdateArgs<ExtArgs>>): Prisma__ProdutosClient<$Result.GetResult<Prisma.$ProdutosPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Produtos.
     * @param {ProdutosDeleteManyArgs} args - Arguments to filter Produtos to delete.
     * @example
     * // Delete a few Produtos
     * const { count } = await prisma.produtos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProdutosDeleteManyArgs>(args?: SelectSubset<T, ProdutosDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Produtos
     * const produtos = await prisma.produtos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProdutosUpdateManyArgs>(args: SelectSubset<T, ProdutosUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Produtos.
     * @param {ProdutosUpsertArgs} args - Arguments to update or create a Produtos.
     * @example
     * // Update or create a Produtos
     * const produtos = await prisma.produtos.upsert({
     *   create: {
     *     // ... data to create a Produtos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Produtos we want to update
     *   }
     * })
     */
    upsert<T extends ProdutosUpsertArgs>(args: SelectSubset<T, ProdutosUpsertArgs<ExtArgs>>): Prisma__ProdutosClient<$Result.GetResult<Prisma.$ProdutosPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutosCountArgs} args - Arguments to filter Produtos to count.
     * @example
     * // Count the number of Produtos
     * const count = await prisma.produtos.count({
     *   where: {
     *     // ... the filter for the Produtos we want to count
     *   }
     * })
    **/
    count<T extends ProdutosCountArgs>(
      args?: Subset<T, ProdutosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProdutosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProdutosAggregateArgs>(args: Subset<T, ProdutosAggregateArgs>): Prisma.PrismaPromise<GetProdutosAggregateType<T>>

    /**
     * Group by Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProdutosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProdutosGroupByArgs['orderBy'] }
        : { orderBy?: ProdutosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProdutosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProdutosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Produtos model
   */
  readonly fields: ProdutosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Produtos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProdutosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Carrinho<T extends Produtos$CarrinhoArgs<ExtArgs> = {}>(args?: Subset<T, Produtos$CarrinhoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CarrinhoPayload<ExtArgs>, T, "findMany"> | Null>
    ProdutoCategoria<T extends Produtos$ProdutoCategoriaArgs<ExtArgs> = {}>(args?: Subset<T, Produtos$ProdutoCategoriaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProdutoCategoriaPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Produtos model
   */ 
  interface ProdutosFieldRefs {
    readonly id: FieldRef<"Produtos", 'Int'>
    readonly name: FieldRef<"Produtos", 'String'>
    readonly description: FieldRef<"Produtos", 'String'>
    readonly price: FieldRef<"Produtos", 'Decimal'>
    readonly marca: FieldRef<"Produtos", 'String'>
    readonly imageUrl: FieldRef<"Produtos", 'String'>
    readonly category: FieldRef<"Produtos", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Produtos findUnique
   */
  export type ProdutosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produtos
     */
    select?: ProdutosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutosInclude<ExtArgs> | null
    /**
     * Filter, which Produtos to fetch.
     */
    where: ProdutosWhereUniqueInput
  }

  /**
   * Produtos findUniqueOrThrow
   */
  export type ProdutosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produtos
     */
    select?: ProdutosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutosInclude<ExtArgs> | null
    /**
     * Filter, which Produtos to fetch.
     */
    where: ProdutosWhereUniqueInput
  }

  /**
   * Produtos findFirst
   */
  export type ProdutosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produtos
     */
    select?: ProdutosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutosInclude<ExtArgs> | null
    /**
     * Filter, which Produtos to fetch.
     */
    where?: ProdutosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: ProdutosOrderByWithRelationInput | ProdutosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Produtos.
     */
    cursor?: ProdutosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Produtos.
     */
    distinct?: ProdutosScalarFieldEnum | ProdutosScalarFieldEnum[]
  }

  /**
   * Produtos findFirstOrThrow
   */
  export type ProdutosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produtos
     */
    select?: ProdutosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutosInclude<ExtArgs> | null
    /**
     * Filter, which Produtos to fetch.
     */
    where?: ProdutosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: ProdutosOrderByWithRelationInput | ProdutosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Produtos.
     */
    cursor?: ProdutosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Produtos.
     */
    distinct?: ProdutosScalarFieldEnum | ProdutosScalarFieldEnum[]
  }

  /**
   * Produtos findMany
   */
  export type ProdutosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produtos
     */
    select?: ProdutosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutosInclude<ExtArgs> | null
    /**
     * Filter, which Produtos to fetch.
     */
    where?: ProdutosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: ProdutosOrderByWithRelationInput | ProdutosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Produtos.
     */
    cursor?: ProdutosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    distinct?: ProdutosScalarFieldEnum | ProdutosScalarFieldEnum[]
  }

  /**
   * Produtos create
   */
  export type ProdutosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produtos
     */
    select?: ProdutosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutosInclude<ExtArgs> | null
    /**
     * The data needed to create a Produtos.
     */
    data: XOR<ProdutosCreateInput, ProdutosUncheckedCreateInput>
  }

  /**
   * Produtos createMany
   */
  export type ProdutosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Produtos.
     */
    data: ProdutosCreateManyInput | ProdutosCreateManyInput[]
  }

  /**
   * Produtos update
   */
  export type ProdutosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produtos
     */
    select?: ProdutosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutosInclude<ExtArgs> | null
    /**
     * The data needed to update a Produtos.
     */
    data: XOR<ProdutosUpdateInput, ProdutosUncheckedUpdateInput>
    /**
     * Choose, which Produtos to update.
     */
    where: ProdutosWhereUniqueInput
  }

  /**
   * Produtos updateMany
   */
  export type ProdutosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Produtos.
     */
    data: XOR<ProdutosUpdateManyMutationInput, ProdutosUncheckedUpdateManyInput>
    /**
     * Filter which Produtos to update
     */
    where?: ProdutosWhereInput
  }

  /**
   * Produtos upsert
   */
  export type ProdutosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produtos
     */
    select?: ProdutosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutosInclude<ExtArgs> | null
    /**
     * The filter to search for the Produtos to update in case it exists.
     */
    where: ProdutosWhereUniqueInput
    /**
     * In case the Produtos found by the `where` argument doesn't exist, create a new Produtos with this data.
     */
    create: XOR<ProdutosCreateInput, ProdutosUncheckedCreateInput>
    /**
     * In case the Produtos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProdutosUpdateInput, ProdutosUncheckedUpdateInput>
  }

  /**
   * Produtos delete
   */
  export type ProdutosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produtos
     */
    select?: ProdutosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutosInclude<ExtArgs> | null
    /**
     * Filter which Produtos to delete.
     */
    where: ProdutosWhereUniqueInput
  }

  /**
   * Produtos deleteMany
   */
  export type ProdutosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Produtos to delete
     */
    where?: ProdutosWhereInput
  }

  /**
   * Produtos.Carrinho
   */
  export type Produtos$CarrinhoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrinho
     */
    select?: CarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarrinhoInclude<ExtArgs> | null
    where?: CarrinhoWhereInput
    orderBy?: CarrinhoOrderByWithRelationInput | CarrinhoOrderByWithRelationInput[]
    cursor?: CarrinhoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CarrinhoScalarFieldEnum | CarrinhoScalarFieldEnum[]
  }

  /**
   * Produtos.ProdutoCategoria
   */
  export type Produtos$ProdutoCategoriaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoCategoria
     */
    select?: ProdutoCategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoCategoriaInclude<ExtArgs> | null
    where?: ProdutoCategoriaWhereInput
    orderBy?: ProdutoCategoriaOrderByWithRelationInput | ProdutoCategoriaOrderByWithRelationInput[]
    cursor?: ProdutoCategoriaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProdutoCategoriaScalarFieldEnum | ProdutoCategoriaScalarFieldEnum[]
  }

  /**
   * Produtos without action
   */
  export type ProdutosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produtos
     */
    select?: ProdutosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutosInclude<ExtArgs> | null
  }


  /**
   * Model Usuarios
   */

  export type AggregateUsuarios = {
    _count: UsuariosCountAggregateOutputType | null
    _avg: UsuariosAvgAggregateOutputType | null
    _sum: UsuariosSumAggregateOutputType | null
    _min: UsuariosMinAggregateOutputType | null
    _max: UsuariosMaxAggregateOutputType | null
  }

  export type UsuariosAvgAggregateOutputType = {
    id: number | null
  }

  export type UsuariosSumAggregateOutputType = {
    id: number | null
  }

  export type UsuariosMinAggregateOutputType = {
    id: number | null
    nome: string | null
    sobrenome: string | null
    usuario: string | null
    senha: string | null
  }

  export type UsuariosMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    sobrenome: string | null
    usuario: string | null
    senha: string | null
  }

  export type UsuariosCountAggregateOutputType = {
    id: number
    nome: number
    sobrenome: number
    usuario: number
    senha: number
    _all: number
  }


  export type UsuariosAvgAggregateInputType = {
    id?: true
  }

  export type UsuariosSumAggregateInputType = {
    id?: true
  }

  export type UsuariosMinAggregateInputType = {
    id?: true
    nome?: true
    sobrenome?: true
    usuario?: true
    senha?: true
  }

  export type UsuariosMaxAggregateInputType = {
    id?: true
    nome?: true
    sobrenome?: true
    usuario?: true
    senha?: true
  }

  export type UsuariosCountAggregateInputType = {
    id?: true
    nome?: true
    sobrenome?: true
    usuario?: true
    senha?: true
    _all?: true
  }

  export type UsuariosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuarios to aggregate.
     */
    where?: UsuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuariosOrderByWithRelationInput | UsuariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Usuarios
    **/
    _count?: true | UsuariosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuariosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuariosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuariosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuariosMaxAggregateInputType
  }

  export type GetUsuariosAggregateType<T extends UsuariosAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuarios]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuarios[P]>
      : GetScalarType<T[P], AggregateUsuarios[P]>
  }




  export type UsuariosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsuariosWhereInput
    orderBy?: UsuariosOrderByWithAggregationInput | UsuariosOrderByWithAggregationInput[]
    by: UsuariosScalarFieldEnum[] | UsuariosScalarFieldEnum
    having?: UsuariosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuariosCountAggregateInputType | true
    _avg?: UsuariosAvgAggregateInputType
    _sum?: UsuariosSumAggregateInputType
    _min?: UsuariosMinAggregateInputType
    _max?: UsuariosMaxAggregateInputType
  }

  export type UsuariosGroupByOutputType = {
    id: number
    nome: string | null
    sobrenome: string | null
    usuario: string | null
    senha: string | null
    _count: UsuariosCountAggregateOutputType | null
    _avg: UsuariosAvgAggregateOutputType | null
    _sum: UsuariosSumAggregateOutputType | null
    _min: UsuariosMinAggregateOutputType | null
    _max: UsuariosMaxAggregateOutputType | null
  }

  type GetUsuariosGroupByPayload<T extends UsuariosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuariosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuariosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuariosGroupByOutputType[P]>
            : GetScalarType<T[P], UsuariosGroupByOutputType[P]>
        }
      >
    >


  export type UsuariosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    sobrenome?: boolean
    usuario?: boolean
    senha?: boolean
    Pedidos?: boolean | Usuarios$PedidosArgs<ExtArgs>
    _count?: boolean | UsuariosCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuarios"]>


  export type UsuariosSelectScalar = {
    id?: boolean
    nome?: boolean
    sobrenome?: boolean
    usuario?: boolean
    senha?: boolean
  }

  export type UsuariosInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Pedidos?: boolean | Usuarios$PedidosArgs<ExtArgs>
    _count?: boolean | UsuariosCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UsuariosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Usuarios"
    objects: {
      Pedidos: Prisma.$PedidosPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string | null
      sobrenome: string | null
      usuario: string | null
      senha: string | null
    }, ExtArgs["result"]["usuarios"]>
    composites: {}
  }

  type UsuariosGetPayload<S extends boolean | null | undefined | UsuariosDefaultArgs> = $Result.GetResult<Prisma.$UsuariosPayload, S>

  type UsuariosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UsuariosFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsuariosCountAggregateInputType | true
    }

  export interface UsuariosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Usuarios'], meta: { name: 'Usuarios' } }
    /**
     * Find zero or one Usuarios that matches the filter.
     * @param {UsuariosFindUniqueArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsuariosFindUniqueArgs>(args: SelectSubset<T, UsuariosFindUniqueArgs<ExtArgs>>): Prisma__UsuariosClient<$Result.GetResult<Prisma.$UsuariosPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Usuarios that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UsuariosFindUniqueOrThrowArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsuariosFindUniqueOrThrowArgs>(args: SelectSubset<T, UsuariosFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsuariosClient<$Result.GetResult<Prisma.$UsuariosPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuariosFindFirstArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsuariosFindFirstArgs>(args?: SelectSubset<T, UsuariosFindFirstArgs<ExtArgs>>): Prisma__UsuariosClient<$Result.GetResult<Prisma.$UsuariosPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Usuarios that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuariosFindFirstOrThrowArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsuariosFindFirstOrThrowArgs>(args?: SelectSubset<T, UsuariosFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsuariosClient<$Result.GetResult<Prisma.$UsuariosPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuariosFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuarios.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuarios.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usuariosWithIdOnly = await prisma.usuarios.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UsuariosFindManyArgs>(args?: SelectSubset<T, UsuariosFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuariosPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Usuarios.
     * @param {UsuariosCreateArgs} args - Arguments to create a Usuarios.
     * @example
     * // Create one Usuarios
     * const Usuarios = await prisma.usuarios.create({
     *   data: {
     *     // ... data to create a Usuarios
     *   }
     * })
     * 
     */
    create<T extends UsuariosCreateArgs>(args: SelectSubset<T, UsuariosCreateArgs<ExtArgs>>): Prisma__UsuariosClient<$Result.GetResult<Prisma.$UsuariosPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Usuarios.
     * @param {UsuariosCreateManyArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuarios = await prisma.usuarios.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsuariosCreateManyArgs>(args?: SelectSubset<T, UsuariosCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Usuarios.
     * @param {UsuariosDeleteArgs} args - Arguments to delete one Usuarios.
     * @example
     * // Delete one Usuarios
     * const Usuarios = await prisma.usuarios.delete({
     *   where: {
     *     // ... filter to delete one Usuarios
     *   }
     * })
     * 
     */
    delete<T extends UsuariosDeleteArgs>(args: SelectSubset<T, UsuariosDeleteArgs<ExtArgs>>): Prisma__UsuariosClient<$Result.GetResult<Prisma.$UsuariosPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Usuarios.
     * @param {UsuariosUpdateArgs} args - Arguments to update one Usuarios.
     * @example
     * // Update one Usuarios
     * const usuarios = await prisma.usuarios.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsuariosUpdateArgs>(args: SelectSubset<T, UsuariosUpdateArgs<ExtArgs>>): Prisma__UsuariosClient<$Result.GetResult<Prisma.$UsuariosPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Usuarios.
     * @param {UsuariosDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuarios.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsuariosDeleteManyArgs>(args?: SelectSubset<T, UsuariosDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuariosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuarios = await prisma.usuarios.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsuariosUpdateManyArgs>(args: SelectSubset<T, UsuariosUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Usuarios.
     * @param {UsuariosUpsertArgs} args - Arguments to update or create a Usuarios.
     * @example
     * // Update or create a Usuarios
     * const usuarios = await prisma.usuarios.upsert({
     *   create: {
     *     // ... data to create a Usuarios
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuarios we want to update
     *   }
     * })
     */
    upsert<T extends UsuariosUpsertArgs>(args: SelectSubset<T, UsuariosUpsertArgs<ExtArgs>>): Prisma__UsuariosClient<$Result.GetResult<Prisma.$UsuariosPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuariosCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuarios.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends UsuariosCountArgs>(
      args?: Subset<T, UsuariosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuariosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuariosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuariosAggregateArgs>(args: Subset<T, UsuariosAggregateArgs>): Prisma.PrismaPromise<GetUsuariosAggregateType<T>>

    /**
     * Group by Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuariosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuariosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuariosGroupByArgs['orderBy'] }
        : { orderBy?: UsuariosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuariosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuariosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Usuarios model
   */
  readonly fields: UsuariosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Usuarios.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsuariosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Pedidos<T extends Usuarios$PedidosArgs<ExtArgs> = {}>(args?: Subset<T, Usuarios$PedidosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PedidosPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Usuarios model
   */ 
  interface UsuariosFieldRefs {
    readonly id: FieldRef<"Usuarios", 'Int'>
    readonly nome: FieldRef<"Usuarios", 'String'>
    readonly sobrenome: FieldRef<"Usuarios", 'String'>
    readonly usuario: FieldRef<"Usuarios", 'String'>
    readonly senha: FieldRef<"Usuarios", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Usuarios findUnique
   */
  export type UsuariosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuarios
     */
    select?: UsuariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuariosInclude<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where: UsuariosWhereUniqueInput
  }

  /**
   * Usuarios findUniqueOrThrow
   */
  export type UsuariosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuarios
     */
    select?: UsuariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuariosInclude<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where: UsuariosWhereUniqueInput
  }

  /**
   * Usuarios findFirst
   */
  export type UsuariosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuarios
     */
    select?: UsuariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuariosInclude<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuariosOrderByWithRelationInput | UsuariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuariosScalarFieldEnum | UsuariosScalarFieldEnum[]
  }

  /**
   * Usuarios findFirstOrThrow
   */
  export type UsuariosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuarios
     */
    select?: UsuariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuariosInclude<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuariosOrderByWithRelationInput | UsuariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuariosScalarFieldEnum | UsuariosScalarFieldEnum[]
  }

  /**
   * Usuarios findMany
   */
  export type UsuariosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuarios
     */
    select?: UsuariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuariosInclude<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuariosOrderByWithRelationInput | UsuariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Usuarios.
     */
    cursor?: UsuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    distinct?: UsuariosScalarFieldEnum | UsuariosScalarFieldEnum[]
  }

  /**
   * Usuarios create
   */
  export type UsuariosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuarios
     */
    select?: UsuariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuariosInclude<ExtArgs> | null
    /**
     * The data needed to create a Usuarios.
     */
    data?: XOR<UsuariosCreateInput, UsuariosUncheckedCreateInput>
  }

  /**
   * Usuarios createMany
   */
  export type UsuariosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Usuarios.
     */
    data: UsuariosCreateManyInput | UsuariosCreateManyInput[]
  }

  /**
   * Usuarios update
   */
  export type UsuariosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuarios
     */
    select?: UsuariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuariosInclude<ExtArgs> | null
    /**
     * The data needed to update a Usuarios.
     */
    data: XOR<UsuariosUpdateInput, UsuariosUncheckedUpdateInput>
    /**
     * Choose, which Usuarios to update.
     */
    where: UsuariosWhereUniqueInput
  }

  /**
   * Usuarios updateMany
   */
  export type UsuariosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuariosUpdateManyMutationInput, UsuariosUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuariosWhereInput
  }

  /**
   * Usuarios upsert
   */
  export type UsuariosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuarios
     */
    select?: UsuariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuariosInclude<ExtArgs> | null
    /**
     * The filter to search for the Usuarios to update in case it exists.
     */
    where: UsuariosWhereUniqueInput
    /**
     * In case the Usuarios found by the `where` argument doesn't exist, create a new Usuarios with this data.
     */
    create: XOR<UsuariosCreateInput, UsuariosUncheckedCreateInput>
    /**
     * In case the Usuarios was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsuariosUpdateInput, UsuariosUncheckedUpdateInput>
  }

  /**
   * Usuarios delete
   */
  export type UsuariosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuarios
     */
    select?: UsuariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuariosInclude<ExtArgs> | null
    /**
     * Filter which Usuarios to delete.
     */
    where: UsuariosWhereUniqueInput
  }

  /**
   * Usuarios deleteMany
   */
  export type UsuariosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuarios to delete
     */
    where?: UsuariosWhereInput
  }

  /**
   * Usuarios.Pedidos
   */
  export type Usuarios$PedidosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedidos
     */
    select?: PedidosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PedidosInclude<ExtArgs> | null
    where?: PedidosWhereInput
    orderBy?: PedidosOrderByWithRelationInput | PedidosOrderByWithRelationInput[]
    cursor?: PedidosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PedidosScalarFieldEnum | PedidosScalarFieldEnum[]
  }

  /**
   * Usuarios without action
   */
  export type UsuariosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuarios
     */
    select?: UsuariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuariosInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable',
    Snapshot: 'Snapshot'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const CarrinhoScalarFieldEnum: {
    id: 'id',
    produto_id: 'produto_id',
    quantidade: 'quantidade',
    pedido_id: 'pedido_id'
  };

  export type CarrinhoScalarFieldEnum = (typeof CarrinhoScalarFieldEnum)[keyof typeof CarrinhoScalarFieldEnum]


  export const CategoriasScalarFieldEnum: {
    id: 'id',
    categoria_nome: 'categoria_nome'
  };

  export type CategoriasScalarFieldEnum = (typeof CategoriasScalarFieldEnum)[keyof typeof CategoriasScalarFieldEnum]


  export const PedidosScalarFieldEnum: {
    id: 'id',
    usuario_id: 'usuario_id',
    total: 'total',
    data: 'data'
  };

  export type PedidosScalarFieldEnum = (typeof PedidosScalarFieldEnum)[keyof typeof PedidosScalarFieldEnum]


  export const ProdutoCategoriaScalarFieldEnum: {
    produto_id: 'produto_id',
    categoria_id: 'categoria_id'
  };

  export type ProdutoCategoriaScalarFieldEnum = (typeof ProdutoCategoriaScalarFieldEnum)[keyof typeof ProdutoCategoriaScalarFieldEnum]


  export const ProdutosScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    price: 'price',
    marca: 'marca',
    imageUrl: 'imageUrl',
    category: 'category'
  };

  export type ProdutosScalarFieldEnum = (typeof ProdutosScalarFieldEnum)[keyof typeof ProdutosScalarFieldEnum]


  export const UsuariosScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    sobrenome: 'sobrenome',
    usuario: 'usuario',
    senha: 'senha'
  };

  export type UsuariosScalarFieldEnum = (typeof UsuariosScalarFieldEnum)[keyof typeof UsuariosScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type CarrinhoWhereInput = {
    AND?: CarrinhoWhereInput | CarrinhoWhereInput[]
    OR?: CarrinhoWhereInput[]
    NOT?: CarrinhoWhereInput | CarrinhoWhereInput[]
    id?: IntFilter<"Carrinho"> | number
    produto_id?: IntNullableFilter<"Carrinho"> | number | null
    quantidade?: IntNullableFilter<"Carrinho"> | number | null
    pedido_id?: IntNullableFilter<"Carrinho"> | number | null
    Produtos?: XOR<ProdutosNullableRelationFilter, ProdutosWhereInput> | null
    Pedidos?: XOR<PedidosNullableRelationFilter, PedidosWhereInput> | null
  }

  export type CarrinhoOrderByWithRelationInput = {
    id?: SortOrder
    produto_id?: SortOrderInput | SortOrder
    quantidade?: SortOrderInput | SortOrder
    pedido_id?: SortOrderInput | SortOrder
    Produtos?: ProdutosOrderByWithRelationInput
    Pedidos?: PedidosOrderByWithRelationInput
  }

  export type CarrinhoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CarrinhoWhereInput | CarrinhoWhereInput[]
    OR?: CarrinhoWhereInput[]
    NOT?: CarrinhoWhereInput | CarrinhoWhereInput[]
    produto_id?: IntNullableFilter<"Carrinho"> | number | null
    quantidade?: IntNullableFilter<"Carrinho"> | number | null
    pedido_id?: IntNullableFilter<"Carrinho"> | number | null
    Produtos?: XOR<ProdutosNullableRelationFilter, ProdutosWhereInput> | null
    Pedidos?: XOR<PedidosNullableRelationFilter, PedidosWhereInput> | null
  }, "id">

  export type CarrinhoOrderByWithAggregationInput = {
    id?: SortOrder
    produto_id?: SortOrderInput | SortOrder
    quantidade?: SortOrderInput | SortOrder
    pedido_id?: SortOrderInput | SortOrder
    _count?: CarrinhoCountOrderByAggregateInput
    _avg?: CarrinhoAvgOrderByAggregateInput
    _max?: CarrinhoMaxOrderByAggregateInput
    _min?: CarrinhoMinOrderByAggregateInput
    _sum?: CarrinhoSumOrderByAggregateInput
  }

  export type CarrinhoScalarWhereWithAggregatesInput = {
    AND?: CarrinhoScalarWhereWithAggregatesInput | CarrinhoScalarWhereWithAggregatesInput[]
    OR?: CarrinhoScalarWhereWithAggregatesInput[]
    NOT?: CarrinhoScalarWhereWithAggregatesInput | CarrinhoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Carrinho"> | number
    produto_id?: IntNullableWithAggregatesFilter<"Carrinho"> | number | null
    quantidade?: IntNullableWithAggregatesFilter<"Carrinho"> | number | null
    pedido_id?: IntNullableWithAggregatesFilter<"Carrinho"> | number | null
  }

  export type CategoriasWhereInput = {
    AND?: CategoriasWhereInput | CategoriasWhereInput[]
    OR?: CategoriasWhereInput[]
    NOT?: CategoriasWhereInput | CategoriasWhereInput[]
    id?: IntFilter<"Categorias"> | number
    categoria_nome?: StringNullableFilter<"Categorias"> | string | null
    ProdutoCategoria?: ProdutoCategoriaListRelationFilter
  }

  export type CategoriasOrderByWithRelationInput = {
    id?: SortOrder
    categoria_nome?: SortOrderInput | SortOrder
    ProdutoCategoria?: ProdutoCategoriaOrderByRelationAggregateInput
  }

  export type CategoriasWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CategoriasWhereInput | CategoriasWhereInput[]
    OR?: CategoriasWhereInput[]
    NOT?: CategoriasWhereInput | CategoriasWhereInput[]
    categoria_nome?: StringNullableFilter<"Categorias"> | string | null
    ProdutoCategoria?: ProdutoCategoriaListRelationFilter
  }, "id">

  export type CategoriasOrderByWithAggregationInput = {
    id?: SortOrder
    categoria_nome?: SortOrderInput | SortOrder
    _count?: CategoriasCountOrderByAggregateInput
    _avg?: CategoriasAvgOrderByAggregateInput
    _max?: CategoriasMaxOrderByAggregateInput
    _min?: CategoriasMinOrderByAggregateInput
    _sum?: CategoriasSumOrderByAggregateInput
  }

  export type CategoriasScalarWhereWithAggregatesInput = {
    AND?: CategoriasScalarWhereWithAggregatesInput | CategoriasScalarWhereWithAggregatesInput[]
    OR?: CategoriasScalarWhereWithAggregatesInput[]
    NOT?: CategoriasScalarWhereWithAggregatesInput | CategoriasScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Categorias"> | number
    categoria_nome?: StringNullableWithAggregatesFilter<"Categorias"> | string | null
  }

  export type PedidosWhereInput = {
    AND?: PedidosWhereInput | PedidosWhereInput[]
    OR?: PedidosWhereInput[]
    NOT?: PedidosWhereInput | PedidosWhereInput[]
    id?: IntFilter<"Pedidos"> | number
    usuario_id?: IntNullableFilter<"Pedidos"> | number | null
    total?: DecimalNullableFilter<"Pedidos"> | Decimal | DecimalJsLike | number | string | null
    data?: DateTimeNullableFilter<"Pedidos"> | Date | string | null
    Carrinho?: CarrinhoListRelationFilter
    Usuarios?: XOR<UsuariosNullableRelationFilter, UsuariosWhereInput> | null
  }

  export type PedidosOrderByWithRelationInput = {
    id?: SortOrder
    usuario_id?: SortOrderInput | SortOrder
    total?: SortOrderInput | SortOrder
    data?: SortOrderInput | SortOrder
    Carrinho?: CarrinhoOrderByRelationAggregateInput
    Usuarios?: UsuariosOrderByWithRelationInput
  }

  export type PedidosWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PedidosWhereInput | PedidosWhereInput[]
    OR?: PedidosWhereInput[]
    NOT?: PedidosWhereInput | PedidosWhereInput[]
    usuario_id?: IntNullableFilter<"Pedidos"> | number | null
    total?: DecimalNullableFilter<"Pedidos"> | Decimal | DecimalJsLike | number | string | null
    data?: DateTimeNullableFilter<"Pedidos"> | Date | string | null
    Carrinho?: CarrinhoListRelationFilter
    Usuarios?: XOR<UsuariosNullableRelationFilter, UsuariosWhereInput> | null
  }, "id">

  export type PedidosOrderByWithAggregationInput = {
    id?: SortOrder
    usuario_id?: SortOrderInput | SortOrder
    total?: SortOrderInput | SortOrder
    data?: SortOrderInput | SortOrder
    _count?: PedidosCountOrderByAggregateInput
    _avg?: PedidosAvgOrderByAggregateInput
    _max?: PedidosMaxOrderByAggregateInput
    _min?: PedidosMinOrderByAggregateInput
    _sum?: PedidosSumOrderByAggregateInput
  }

  export type PedidosScalarWhereWithAggregatesInput = {
    AND?: PedidosScalarWhereWithAggregatesInput | PedidosScalarWhereWithAggregatesInput[]
    OR?: PedidosScalarWhereWithAggregatesInput[]
    NOT?: PedidosScalarWhereWithAggregatesInput | PedidosScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Pedidos"> | number
    usuario_id?: IntNullableWithAggregatesFilter<"Pedidos"> | number | null
    total?: DecimalNullableWithAggregatesFilter<"Pedidos"> | Decimal | DecimalJsLike | number | string | null
    data?: DateTimeNullableWithAggregatesFilter<"Pedidos"> | Date | string | null
  }

  export type ProdutoCategoriaWhereInput = {
    AND?: ProdutoCategoriaWhereInput | ProdutoCategoriaWhereInput[]
    OR?: ProdutoCategoriaWhereInput[]
    NOT?: ProdutoCategoriaWhereInput | ProdutoCategoriaWhereInput[]
    produto_id?: IntFilter<"ProdutoCategoria"> | number
    categoria_id?: IntFilter<"ProdutoCategoria"> | number
    Categorias?: XOR<CategoriasRelationFilter, CategoriasWhereInput>
    Produtos?: XOR<ProdutosRelationFilter, ProdutosWhereInput>
  }

  export type ProdutoCategoriaOrderByWithRelationInput = {
    produto_id?: SortOrder
    categoria_id?: SortOrder
    Categorias?: CategoriasOrderByWithRelationInput
    Produtos?: ProdutosOrderByWithRelationInput
  }

  export type ProdutoCategoriaWhereUniqueInput = Prisma.AtLeast<{
    produto_id_categoria_id?: ProdutoCategoriaProduto_idCategoria_idCompoundUniqueInput
    AND?: ProdutoCategoriaWhereInput | ProdutoCategoriaWhereInput[]
    OR?: ProdutoCategoriaWhereInput[]
    NOT?: ProdutoCategoriaWhereInput | ProdutoCategoriaWhereInput[]
    produto_id?: IntFilter<"ProdutoCategoria"> | number
    categoria_id?: IntFilter<"ProdutoCategoria"> | number
    Categorias?: XOR<CategoriasRelationFilter, CategoriasWhereInput>
    Produtos?: XOR<ProdutosRelationFilter, ProdutosWhereInput>
  }, "produto_id_categoria_id">

  export type ProdutoCategoriaOrderByWithAggregationInput = {
    produto_id?: SortOrder
    categoria_id?: SortOrder
    _count?: ProdutoCategoriaCountOrderByAggregateInput
    _avg?: ProdutoCategoriaAvgOrderByAggregateInput
    _max?: ProdutoCategoriaMaxOrderByAggregateInput
    _min?: ProdutoCategoriaMinOrderByAggregateInput
    _sum?: ProdutoCategoriaSumOrderByAggregateInput
  }

  export type ProdutoCategoriaScalarWhereWithAggregatesInput = {
    AND?: ProdutoCategoriaScalarWhereWithAggregatesInput | ProdutoCategoriaScalarWhereWithAggregatesInput[]
    OR?: ProdutoCategoriaScalarWhereWithAggregatesInput[]
    NOT?: ProdutoCategoriaScalarWhereWithAggregatesInput | ProdutoCategoriaScalarWhereWithAggregatesInput[]
    produto_id?: IntWithAggregatesFilter<"ProdutoCategoria"> | number
    categoria_id?: IntWithAggregatesFilter<"ProdutoCategoria"> | number
  }

  export type ProdutosWhereInput = {
    AND?: ProdutosWhereInput | ProdutosWhereInput[]
    OR?: ProdutosWhereInput[]
    NOT?: ProdutosWhereInput | ProdutosWhereInput[]
    id?: IntFilter<"Produtos"> | number
    name?: StringNullableFilter<"Produtos"> | string | null
    description?: StringNullableFilter<"Produtos"> | string | null
    price?: DecimalNullableFilter<"Produtos"> | Decimal | DecimalJsLike | number | string | null
    marca?: StringNullableFilter<"Produtos"> | string | null
    imageUrl?: StringNullableFilter<"Produtos"> | string | null
    category?: StringNullableFilter<"Produtos"> | string | null
    Carrinho?: CarrinhoListRelationFilter
    ProdutoCategoria?: ProdutoCategoriaListRelationFilter
  }

  export type ProdutosOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    price?: SortOrderInput | SortOrder
    marca?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    Carrinho?: CarrinhoOrderByRelationAggregateInput
    ProdutoCategoria?: ProdutoCategoriaOrderByRelationAggregateInput
  }

  export type ProdutosWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProdutosWhereInput | ProdutosWhereInput[]
    OR?: ProdutosWhereInput[]
    NOT?: ProdutosWhereInput | ProdutosWhereInput[]
    name?: StringNullableFilter<"Produtos"> | string | null
    description?: StringNullableFilter<"Produtos"> | string | null
    price?: DecimalNullableFilter<"Produtos"> | Decimal | DecimalJsLike | number | string | null
    marca?: StringNullableFilter<"Produtos"> | string | null
    imageUrl?: StringNullableFilter<"Produtos"> | string | null
    category?: StringNullableFilter<"Produtos"> | string | null
    Carrinho?: CarrinhoListRelationFilter
    ProdutoCategoria?: ProdutoCategoriaListRelationFilter
  }, "id">

  export type ProdutosOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    price?: SortOrderInput | SortOrder
    marca?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    _count?: ProdutosCountOrderByAggregateInput
    _avg?: ProdutosAvgOrderByAggregateInput
    _max?: ProdutosMaxOrderByAggregateInput
    _min?: ProdutosMinOrderByAggregateInput
    _sum?: ProdutosSumOrderByAggregateInput
  }

  export type ProdutosScalarWhereWithAggregatesInput = {
    AND?: ProdutosScalarWhereWithAggregatesInput | ProdutosScalarWhereWithAggregatesInput[]
    OR?: ProdutosScalarWhereWithAggregatesInput[]
    NOT?: ProdutosScalarWhereWithAggregatesInput | ProdutosScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Produtos"> | number
    name?: StringNullableWithAggregatesFilter<"Produtos"> | string | null
    description?: StringNullableWithAggregatesFilter<"Produtos"> | string | null
    price?: DecimalNullableWithAggregatesFilter<"Produtos"> | Decimal | DecimalJsLike | number | string | null
    marca?: StringNullableWithAggregatesFilter<"Produtos"> | string | null
    imageUrl?: StringNullableWithAggregatesFilter<"Produtos"> | string | null
    category?: StringNullableWithAggregatesFilter<"Produtos"> | string | null
  }

  export type UsuariosWhereInput = {
    AND?: UsuariosWhereInput | UsuariosWhereInput[]
    OR?: UsuariosWhereInput[]
    NOT?: UsuariosWhereInput | UsuariosWhereInput[]
    id?: IntFilter<"Usuarios"> | number
    nome?: StringNullableFilter<"Usuarios"> | string | null
    sobrenome?: StringNullableFilter<"Usuarios"> | string | null
    usuario?: StringNullableFilter<"Usuarios"> | string | null
    senha?: StringNullableFilter<"Usuarios"> | string | null
    Pedidos?: PedidosListRelationFilter
  }

  export type UsuariosOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrderInput | SortOrder
    sobrenome?: SortOrderInput | SortOrder
    usuario?: SortOrderInput | SortOrder
    senha?: SortOrderInput | SortOrder
    Pedidos?: PedidosOrderByRelationAggregateInput
  }

  export type UsuariosWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    usuario?: string
    AND?: UsuariosWhereInput | UsuariosWhereInput[]
    OR?: UsuariosWhereInput[]
    NOT?: UsuariosWhereInput | UsuariosWhereInput[]
    nome?: StringNullableFilter<"Usuarios"> | string | null
    sobrenome?: StringNullableFilter<"Usuarios"> | string | null
    senha?: StringNullableFilter<"Usuarios"> | string | null
    Pedidos?: PedidosListRelationFilter
  }, "id" | "usuario">

  export type UsuariosOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrderInput | SortOrder
    sobrenome?: SortOrderInput | SortOrder
    usuario?: SortOrderInput | SortOrder
    senha?: SortOrderInput | SortOrder
    _count?: UsuariosCountOrderByAggregateInput
    _avg?: UsuariosAvgOrderByAggregateInput
    _max?: UsuariosMaxOrderByAggregateInput
    _min?: UsuariosMinOrderByAggregateInput
    _sum?: UsuariosSumOrderByAggregateInput
  }

  export type UsuariosScalarWhereWithAggregatesInput = {
    AND?: UsuariosScalarWhereWithAggregatesInput | UsuariosScalarWhereWithAggregatesInput[]
    OR?: UsuariosScalarWhereWithAggregatesInput[]
    NOT?: UsuariosScalarWhereWithAggregatesInput | UsuariosScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Usuarios"> | number
    nome?: StringNullableWithAggregatesFilter<"Usuarios"> | string | null
    sobrenome?: StringNullableWithAggregatesFilter<"Usuarios"> | string | null
    usuario?: StringNullableWithAggregatesFilter<"Usuarios"> | string | null
    senha?: StringNullableWithAggregatesFilter<"Usuarios"> | string | null
  }

  export type CarrinhoCreateInput = {
    quantidade?: number | null
    Produtos?: ProdutosCreateNestedOneWithoutCarrinhoInput
    Pedidos?: PedidosCreateNestedOneWithoutCarrinhoInput
  }

  export type CarrinhoUncheckedCreateInput = {
    id?: number
    produto_id?: number | null
    quantidade?: number | null
    pedido_id?: number | null
  }

  export type CarrinhoUpdateInput = {
    quantidade?: NullableIntFieldUpdateOperationsInput | number | null
    Produtos?: ProdutosUpdateOneWithoutCarrinhoNestedInput
    Pedidos?: PedidosUpdateOneWithoutCarrinhoNestedInput
  }

  export type CarrinhoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    produto_id?: NullableIntFieldUpdateOperationsInput | number | null
    quantidade?: NullableIntFieldUpdateOperationsInput | number | null
    pedido_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CarrinhoCreateManyInput = {
    produto_id?: number | null
    quantidade?: number | null
    pedido_id?: number | null
  }

  export type CarrinhoUpdateManyMutationInput = {
    quantidade?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CarrinhoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    produto_id?: NullableIntFieldUpdateOperationsInput | number | null
    quantidade?: NullableIntFieldUpdateOperationsInput | number | null
    pedido_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CategoriasCreateInput = {
    categoria_nome?: string | null
    ProdutoCategoria?: ProdutoCategoriaCreateNestedManyWithoutCategoriasInput
  }

  export type CategoriasUncheckedCreateInput = {
    id?: number
    categoria_nome?: string | null
    ProdutoCategoria?: ProdutoCategoriaUncheckedCreateNestedManyWithoutCategoriasInput
  }

  export type CategoriasUpdateInput = {
    categoria_nome?: NullableStringFieldUpdateOperationsInput | string | null
    ProdutoCategoria?: ProdutoCategoriaUpdateManyWithoutCategoriasNestedInput
  }

  export type CategoriasUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoria_nome?: NullableStringFieldUpdateOperationsInput | string | null
    ProdutoCategoria?: ProdutoCategoriaUncheckedUpdateManyWithoutCategoriasNestedInput
  }

  export type CategoriasCreateManyInput = {
    categoria_nome?: string | null
  }

  export type CategoriasUpdateManyMutationInput = {
    categoria_nome?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CategoriasUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoria_nome?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PedidosCreateInput = {
    total?: Decimal | DecimalJsLike | number | string | null
    data?: Date | string | null
    Carrinho?: CarrinhoCreateNestedManyWithoutPedidosInput
    Usuarios?: UsuariosCreateNestedOneWithoutPedidosInput
  }

  export type PedidosUncheckedCreateInput = {
    id?: number
    usuario_id?: number | null
    total?: Decimal | DecimalJsLike | number | string | null
    data?: Date | string | null
    Carrinho?: CarrinhoUncheckedCreateNestedManyWithoutPedidosInput
  }

  export type PedidosUpdateInput = {
    total?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    data?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Carrinho?: CarrinhoUpdateManyWithoutPedidosNestedInput
    Usuarios?: UsuariosUpdateOneWithoutPedidosNestedInput
  }

  export type PedidosUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuario_id?: NullableIntFieldUpdateOperationsInput | number | null
    total?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    data?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Carrinho?: CarrinhoUncheckedUpdateManyWithoutPedidosNestedInput
  }

  export type PedidosCreateManyInput = {
    usuario_id?: number | null
    total?: Decimal | DecimalJsLike | number | string | null
    data?: Date | string | null
  }

  export type PedidosUpdateManyMutationInput = {
    total?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    data?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PedidosUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuario_id?: NullableIntFieldUpdateOperationsInput | number | null
    total?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    data?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProdutoCategoriaCreateInput = {
    Categorias: CategoriasCreateNestedOneWithoutProdutoCategoriaInput
    Produtos: ProdutosCreateNestedOneWithoutProdutoCategoriaInput
  }

  export type ProdutoCategoriaUncheckedCreateInput = {
    produto_id: number
    categoria_id: number
  }

  export type ProdutoCategoriaUpdateInput = {
    Categorias?: CategoriasUpdateOneRequiredWithoutProdutoCategoriaNestedInput
    Produtos?: ProdutosUpdateOneRequiredWithoutProdutoCategoriaNestedInput
  }

  export type ProdutoCategoriaUncheckedUpdateInput = {
    produto_id?: IntFieldUpdateOperationsInput | number
    categoria_id?: IntFieldUpdateOperationsInput | number
  }

  export type ProdutoCategoriaCreateManyInput = {
    produto_id: number
    categoria_id: number
  }

  export type ProdutoCategoriaUpdateManyMutationInput = {

  }

  export type ProdutoCategoriaUncheckedUpdateManyInput = {
    produto_id?: IntFieldUpdateOperationsInput | number
    categoria_id?: IntFieldUpdateOperationsInput | number
  }

  export type ProdutosCreateInput = {
    id: number
    name?: string | null
    description?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    marca?: string | null
    imageUrl?: string | null
    category?: string | null
    Carrinho?: CarrinhoCreateNestedManyWithoutProdutosInput
    ProdutoCategoria?: ProdutoCategoriaCreateNestedManyWithoutProdutosInput
  }

  export type ProdutosUncheckedCreateInput = {
    id: number
    name?: string | null
    description?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    marca?: string | null
    imageUrl?: string | null
    category?: string | null
    Carrinho?: CarrinhoUncheckedCreateNestedManyWithoutProdutosInput
    ProdutoCategoria?: ProdutoCategoriaUncheckedCreateNestedManyWithoutProdutosInput
  }

  export type ProdutosUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    marca?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    Carrinho?: CarrinhoUpdateManyWithoutProdutosNestedInput
    ProdutoCategoria?: ProdutoCategoriaUpdateManyWithoutProdutosNestedInput
  }

  export type ProdutosUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    marca?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    Carrinho?: CarrinhoUncheckedUpdateManyWithoutProdutosNestedInput
    ProdutoCategoria?: ProdutoCategoriaUncheckedUpdateManyWithoutProdutosNestedInput
  }

  export type ProdutosCreateManyInput = {
    id: number
    name?: string | null
    description?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    marca?: string | null
    imageUrl?: string | null
    category?: string | null
  }

  export type ProdutosUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    marca?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProdutosUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    marca?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UsuariosCreateInput = {
    nome?: string | null
    sobrenome?: string | null
    usuario?: string | null
    senha?: string | null
    Pedidos?: PedidosCreateNestedManyWithoutUsuariosInput
  }

  export type UsuariosUncheckedCreateInput = {
    id?: number
    nome?: string | null
    sobrenome?: string | null
    usuario?: string | null
    senha?: string | null
    Pedidos?: PedidosUncheckedCreateNestedManyWithoutUsuariosInput
  }

  export type UsuariosUpdateInput = {
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    sobrenome?: NullableStringFieldUpdateOperationsInput | string | null
    usuario?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: NullableStringFieldUpdateOperationsInput | string | null
    Pedidos?: PedidosUpdateManyWithoutUsuariosNestedInput
  }

  export type UsuariosUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    sobrenome?: NullableStringFieldUpdateOperationsInput | string | null
    usuario?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: NullableStringFieldUpdateOperationsInput | string | null
    Pedidos?: PedidosUncheckedUpdateManyWithoutUsuariosNestedInput
  }

  export type UsuariosCreateManyInput = {
    nome?: string | null
    sobrenome?: string | null
    usuario?: string | null
    senha?: string | null
  }

  export type UsuariosUpdateManyMutationInput = {
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    sobrenome?: NullableStringFieldUpdateOperationsInput | string | null
    usuario?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UsuariosUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    sobrenome?: NullableStringFieldUpdateOperationsInput | string | null
    usuario?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type ProdutosNullableRelationFilter = {
    is?: ProdutosWhereInput | null
    isNot?: ProdutosWhereInput | null
  }

  export type PedidosNullableRelationFilter = {
    is?: PedidosWhereInput | null
    isNot?: PedidosWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type CarrinhoCountOrderByAggregateInput = {
    id?: SortOrder
    produto_id?: SortOrder
    quantidade?: SortOrder
    pedido_id?: SortOrder
  }

  export type CarrinhoAvgOrderByAggregateInput = {
    id?: SortOrder
    produto_id?: SortOrder
    quantidade?: SortOrder
    pedido_id?: SortOrder
  }

  export type CarrinhoMaxOrderByAggregateInput = {
    id?: SortOrder
    produto_id?: SortOrder
    quantidade?: SortOrder
    pedido_id?: SortOrder
  }

  export type CarrinhoMinOrderByAggregateInput = {
    id?: SortOrder
    produto_id?: SortOrder
    quantidade?: SortOrder
    pedido_id?: SortOrder
  }

  export type CarrinhoSumOrderByAggregateInput = {
    id?: SortOrder
    produto_id?: SortOrder
    quantidade?: SortOrder
    pedido_id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type ProdutoCategoriaListRelationFilter = {
    every?: ProdutoCategoriaWhereInput
    some?: ProdutoCategoriaWhereInput
    none?: ProdutoCategoriaWhereInput
  }

  export type ProdutoCategoriaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoriasCountOrderByAggregateInput = {
    id?: SortOrder
    categoria_nome?: SortOrder
  }

  export type CategoriasAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CategoriasMaxOrderByAggregateInput = {
    id?: SortOrder
    categoria_nome?: SortOrder
  }

  export type CategoriasMinOrderByAggregateInput = {
    id?: SortOrder
    categoria_nome?: SortOrder
  }

  export type CategoriasSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type CarrinhoListRelationFilter = {
    every?: CarrinhoWhereInput
    some?: CarrinhoWhereInput
    none?: CarrinhoWhereInput
  }

  export type UsuariosNullableRelationFilter = {
    is?: UsuariosWhereInput | null
    isNot?: UsuariosWhereInput | null
  }

  export type CarrinhoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PedidosCountOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    total?: SortOrder
    data?: SortOrder
  }

  export type PedidosAvgOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    total?: SortOrder
  }

  export type PedidosMaxOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    total?: SortOrder
    data?: SortOrder
  }

  export type PedidosMinOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    total?: SortOrder
    data?: SortOrder
  }

  export type PedidosSumOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    total?: SortOrder
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type CategoriasRelationFilter = {
    is?: CategoriasWhereInput
    isNot?: CategoriasWhereInput
  }

  export type ProdutosRelationFilter = {
    is?: ProdutosWhereInput
    isNot?: ProdutosWhereInput
  }

  export type ProdutoCategoriaProduto_idCategoria_idCompoundUniqueInput = {
    produto_id: number
    categoria_id: number
  }

  export type ProdutoCategoriaCountOrderByAggregateInput = {
    produto_id?: SortOrder
    categoria_id?: SortOrder
  }

  export type ProdutoCategoriaAvgOrderByAggregateInput = {
    produto_id?: SortOrder
    categoria_id?: SortOrder
  }

  export type ProdutoCategoriaMaxOrderByAggregateInput = {
    produto_id?: SortOrder
    categoria_id?: SortOrder
  }

  export type ProdutoCategoriaMinOrderByAggregateInput = {
    produto_id?: SortOrder
    categoria_id?: SortOrder
  }

  export type ProdutoCategoriaSumOrderByAggregateInput = {
    produto_id?: SortOrder
    categoria_id?: SortOrder
  }

  export type ProdutosCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    price?: SortOrder
    marca?: SortOrder
    imageUrl?: SortOrder
    category?: SortOrder
  }

  export type ProdutosAvgOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
  }

  export type ProdutosMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    price?: SortOrder
    marca?: SortOrder
    imageUrl?: SortOrder
    category?: SortOrder
  }

  export type ProdutosMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    price?: SortOrder
    marca?: SortOrder
    imageUrl?: SortOrder
    category?: SortOrder
  }

  export type ProdutosSumOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
  }

  export type PedidosListRelationFilter = {
    every?: PedidosWhereInput
    some?: PedidosWhereInput
    none?: PedidosWhereInput
  }

  export type PedidosOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsuariosCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    sobrenome?: SortOrder
    usuario?: SortOrder
    senha?: SortOrder
  }

  export type UsuariosAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UsuariosMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    sobrenome?: SortOrder
    usuario?: SortOrder
    senha?: SortOrder
  }

  export type UsuariosMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    sobrenome?: SortOrder
    usuario?: SortOrder
    senha?: SortOrder
  }

  export type UsuariosSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ProdutosCreateNestedOneWithoutCarrinhoInput = {
    create?: XOR<ProdutosCreateWithoutCarrinhoInput, ProdutosUncheckedCreateWithoutCarrinhoInput>
    connectOrCreate?: ProdutosCreateOrConnectWithoutCarrinhoInput
    connect?: ProdutosWhereUniqueInput
  }

  export type PedidosCreateNestedOneWithoutCarrinhoInput = {
    create?: XOR<PedidosCreateWithoutCarrinhoInput, PedidosUncheckedCreateWithoutCarrinhoInput>
    connectOrCreate?: PedidosCreateOrConnectWithoutCarrinhoInput
    connect?: PedidosWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProdutosUpdateOneWithoutCarrinhoNestedInput = {
    create?: XOR<ProdutosCreateWithoutCarrinhoInput, ProdutosUncheckedCreateWithoutCarrinhoInput>
    connectOrCreate?: ProdutosCreateOrConnectWithoutCarrinhoInput
    upsert?: ProdutosUpsertWithoutCarrinhoInput
    disconnect?: ProdutosWhereInput | boolean
    delete?: ProdutosWhereInput | boolean
    connect?: ProdutosWhereUniqueInput
    update?: XOR<XOR<ProdutosUpdateToOneWithWhereWithoutCarrinhoInput, ProdutosUpdateWithoutCarrinhoInput>, ProdutosUncheckedUpdateWithoutCarrinhoInput>
  }

  export type PedidosUpdateOneWithoutCarrinhoNestedInput = {
    create?: XOR<PedidosCreateWithoutCarrinhoInput, PedidosUncheckedCreateWithoutCarrinhoInput>
    connectOrCreate?: PedidosCreateOrConnectWithoutCarrinhoInput
    upsert?: PedidosUpsertWithoutCarrinhoInput
    disconnect?: PedidosWhereInput | boolean
    delete?: PedidosWhereInput | boolean
    connect?: PedidosWhereUniqueInput
    update?: XOR<XOR<PedidosUpdateToOneWithWhereWithoutCarrinhoInput, PedidosUpdateWithoutCarrinhoInput>, PedidosUncheckedUpdateWithoutCarrinhoInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProdutoCategoriaCreateNestedManyWithoutCategoriasInput = {
    create?: XOR<ProdutoCategoriaCreateWithoutCategoriasInput, ProdutoCategoriaUncheckedCreateWithoutCategoriasInput> | ProdutoCategoriaCreateWithoutCategoriasInput[] | ProdutoCategoriaUncheckedCreateWithoutCategoriasInput[]
    connectOrCreate?: ProdutoCategoriaCreateOrConnectWithoutCategoriasInput | ProdutoCategoriaCreateOrConnectWithoutCategoriasInput[]
    createMany?: ProdutoCategoriaCreateManyCategoriasInputEnvelope
    connect?: ProdutoCategoriaWhereUniqueInput | ProdutoCategoriaWhereUniqueInput[]
  }

  export type ProdutoCategoriaUncheckedCreateNestedManyWithoutCategoriasInput = {
    create?: XOR<ProdutoCategoriaCreateWithoutCategoriasInput, ProdutoCategoriaUncheckedCreateWithoutCategoriasInput> | ProdutoCategoriaCreateWithoutCategoriasInput[] | ProdutoCategoriaUncheckedCreateWithoutCategoriasInput[]
    connectOrCreate?: ProdutoCategoriaCreateOrConnectWithoutCategoriasInput | ProdutoCategoriaCreateOrConnectWithoutCategoriasInput[]
    createMany?: ProdutoCategoriaCreateManyCategoriasInputEnvelope
    connect?: ProdutoCategoriaWhereUniqueInput | ProdutoCategoriaWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type ProdutoCategoriaUpdateManyWithoutCategoriasNestedInput = {
    create?: XOR<ProdutoCategoriaCreateWithoutCategoriasInput, ProdutoCategoriaUncheckedCreateWithoutCategoriasInput> | ProdutoCategoriaCreateWithoutCategoriasInput[] | ProdutoCategoriaUncheckedCreateWithoutCategoriasInput[]
    connectOrCreate?: ProdutoCategoriaCreateOrConnectWithoutCategoriasInput | ProdutoCategoriaCreateOrConnectWithoutCategoriasInput[]
    upsert?: ProdutoCategoriaUpsertWithWhereUniqueWithoutCategoriasInput | ProdutoCategoriaUpsertWithWhereUniqueWithoutCategoriasInput[]
    createMany?: ProdutoCategoriaCreateManyCategoriasInputEnvelope
    set?: ProdutoCategoriaWhereUniqueInput | ProdutoCategoriaWhereUniqueInput[]
    disconnect?: ProdutoCategoriaWhereUniqueInput | ProdutoCategoriaWhereUniqueInput[]
    delete?: ProdutoCategoriaWhereUniqueInput | ProdutoCategoriaWhereUniqueInput[]
    connect?: ProdutoCategoriaWhereUniqueInput | ProdutoCategoriaWhereUniqueInput[]
    update?: ProdutoCategoriaUpdateWithWhereUniqueWithoutCategoriasInput | ProdutoCategoriaUpdateWithWhereUniqueWithoutCategoriasInput[]
    updateMany?: ProdutoCategoriaUpdateManyWithWhereWithoutCategoriasInput | ProdutoCategoriaUpdateManyWithWhereWithoutCategoriasInput[]
    deleteMany?: ProdutoCategoriaScalarWhereInput | ProdutoCategoriaScalarWhereInput[]
  }

  export type ProdutoCategoriaUncheckedUpdateManyWithoutCategoriasNestedInput = {
    create?: XOR<ProdutoCategoriaCreateWithoutCategoriasInput, ProdutoCategoriaUncheckedCreateWithoutCategoriasInput> | ProdutoCategoriaCreateWithoutCategoriasInput[] | ProdutoCategoriaUncheckedCreateWithoutCategoriasInput[]
    connectOrCreate?: ProdutoCategoriaCreateOrConnectWithoutCategoriasInput | ProdutoCategoriaCreateOrConnectWithoutCategoriasInput[]
    upsert?: ProdutoCategoriaUpsertWithWhereUniqueWithoutCategoriasInput | ProdutoCategoriaUpsertWithWhereUniqueWithoutCategoriasInput[]
    createMany?: ProdutoCategoriaCreateManyCategoriasInputEnvelope
    set?: ProdutoCategoriaWhereUniqueInput | ProdutoCategoriaWhereUniqueInput[]
    disconnect?: ProdutoCategoriaWhereUniqueInput | ProdutoCategoriaWhereUniqueInput[]
    delete?: ProdutoCategoriaWhereUniqueInput | ProdutoCategoriaWhereUniqueInput[]
    connect?: ProdutoCategoriaWhereUniqueInput | ProdutoCategoriaWhereUniqueInput[]
    update?: ProdutoCategoriaUpdateWithWhereUniqueWithoutCategoriasInput | ProdutoCategoriaUpdateWithWhereUniqueWithoutCategoriasInput[]
    updateMany?: ProdutoCategoriaUpdateManyWithWhereWithoutCategoriasInput | ProdutoCategoriaUpdateManyWithWhereWithoutCategoriasInput[]
    deleteMany?: ProdutoCategoriaScalarWhereInput | ProdutoCategoriaScalarWhereInput[]
  }

  export type CarrinhoCreateNestedManyWithoutPedidosInput = {
    create?: XOR<CarrinhoCreateWithoutPedidosInput, CarrinhoUncheckedCreateWithoutPedidosInput> | CarrinhoCreateWithoutPedidosInput[] | CarrinhoUncheckedCreateWithoutPedidosInput[]
    connectOrCreate?: CarrinhoCreateOrConnectWithoutPedidosInput | CarrinhoCreateOrConnectWithoutPedidosInput[]
    createMany?: CarrinhoCreateManyPedidosInputEnvelope
    connect?: CarrinhoWhereUniqueInput | CarrinhoWhereUniqueInput[]
  }

  export type UsuariosCreateNestedOneWithoutPedidosInput = {
    create?: XOR<UsuariosCreateWithoutPedidosInput, UsuariosUncheckedCreateWithoutPedidosInput>
    connectOrCreate?: UsuariosCreateOrConnectWithoutPedidosInput
    connect?: UsuariosWhereUniqueInput
  }

  export type CarrinhoUncheckedCreateNestedManyWithoutPedidosInput = {
    create?: XOR<CarrinhoCreateWithoutPedidosInput, CarrinhoUncheckedCreateWithoutPedidosInput> | CarrinhoCreateWithoutPedidosInput[] | CarrinhoUncheckedCreateWithoutPedidosInput[]
    connectOrCreate?: CarrinhoCreateOrConnectWithoutPedidosInput | CarrinhoCreateOrConnectWithoutPedidosInput[]
    createMany?: CarrinhoCreateManyPedidosInputEnvelope
    connect?: CarrinhoWhereUniqueInput | CarrinhoWhereUniqueInput[]
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type CarrinhoUpdateManyWithoutPedidosNestedInput = {
    create?: XOR<CarrinhoCreateWithoutPedidosInput, CarrinhoUncheckedCreateWithoutPedidosInput> | CarrinhoCreateWithoutPedidosInput[] | CarrinhoUncheckedCreateWithoutPedidosInput[]
    connectOrCreate?: CarrinhoCreateOrConnectWithoutPedidosInput | CarrinhoCreateOrConnectWithoutPedidosInput[]
    upsert?: CarrinhoUpsertWithWhereUniqueWithoutPedidosInput | CarrinhoUpsertWithWhereUniqueWithoutPedidosInput[]
    createMany?: CarrinhoCreateManyPedidosInputEnvelope
    set?: CarrinhoWhereUniqueInput | CarrinhoWhereUniqueInput[]
    disconnect?: CarrinhoWhereUniqueInput | CarrinhoWhereUniqueInput[]
    delete?: CarrinhoWhereUniqueInput | CarrinhoWhereUniqueInput[]
    connect?: CarrinhoWhereUniqueInput | CarrinhoWhereUniqueInput[]
    update?: CarrinhoUpdateWithWhereUniqueWithoutPedidosInput | CarrinhoUpdateWithWhereUniqueWithoutPedidosInput[]
    updateMany?: CarrinhoUpdateManyWithWhereWithoutPedidosInput | CarrinhoUpdateManyWithWhereWithoutPedidosInput[]
    deleteMany?: CarrinhoScalarWhereInput | CarrinhoScalarWhereInput[]
  }

  export type UsuariosUpdateOneWithoutPedidosNestedInput = {
    create?: XOR<UsuariosCreateWithoutPedidosInput, UsuariosUncheckedCreateWithoutPedidosInput>
    connectOrCreate?: UsuariosCreateOrConnectWithoutPedidosInput
    upsert?: UsuariosUpsertWithoutPedidosInput
    disconnect?: UsuariosWhereInput | boolean
    delete?: UsuariosWhereInput | boolean
    connect?: UsuariosWhereUniqueInput
    update?: XOR<XOR<UsuariosUpdateToOneWithWhereWithoutPedidosInput, UsuariosUpdateWithoutPedidosInput>, UsuariosUncheckedUpdateWithoutPedidosInput>
  }

  export type CarrinhoUncheckedUpdateManyWithoutPedidosNestedInput = {
    create?: XOR<CarrinhoCreateWithoutPedidosInput, CarrinhoUncheckedCreateWithoutPedidosInput> | CarrinhoCreateWithoutPedidosInput[] | CarrinhoUncheckedCreateWithoutPedidosInput[]
    connectOrCreate?: CarrinhoCreateOrConnectWithoutPedidosInput | CarrinhoCreateOrConnectWithoutPedidosInput[]
    upsert?: CarrinhoUpsertWithWhereUniqueWithoutPedidosInput | CarrinhoUpsertWithWhereUniqueWithoutPedidosInput[]
    createMany?: CarrinhoCreateManyPedidosInputEnvelope
    set?: CarrinhoWhereUniqueInput | CarrinhoWhereUniqueInput[]
    disconnect?: CarrinhoWhereUniqueInput | CarrinhoWhereUniqueInput[]
    delete?: CarrinhoWhereUniqueInput | CarrinhoWhereUniqueInput[]
    connect?: CarrinhoWhereUniqueInput | CarrinhoWhereUniqueInput[]
    update?: CarrinhoUpdateWithWhereUniqueWithoutPedidosInput | CarrinhoUpdateWithWhereUniqueWithoutPedidosInput[]
    updateMany?: CarrinhoUpdateManyWithWhereWithoutPedidosInput | CarrinhoUpdateManyWithWhereWithoutPedidosInput[]
    deleteMany?: CarrinhoScalarWhereInput | CarrinhoScalarWhereInput[]
  }

  export type CategoriasCreateNestedOneWithoutProdutoCategoriaInput = {
    create?: XOR<CategoriasCreateWithoutProdutoCategoriaInput, CategoriasUncheckedCreateWithoutProdutoCategoriaInput>
    connectOrCreate?: CategoriasCreateOrConnectWithoutProdutoCategoriaInput
    connect?: CategoriasWhereUniqueInput
  }

  export type ProdutosCreateNestedOneWithoutProdutoCategoriaInput = {
    create?: XOR<ProdutosCreateWithoutProdutoCategoriaInput, ProdutosUncheckedCreateWithoutProdutoCategoriaInput>
    connectOrCreate?: ProdutosCreateOrConnectWithoutProdutoCategoriaInput
    connect?: ProdutosWhereUniqueInput
  }

  export type CategoriasUpdateOneRequiredWithoutProdutoCategoriaNestedInput = {
    create?: XOR<CategoriasCreateWithoutProdutoCategoriaInput, CategoriasUncheckedCreateWithoutProdutoCategoriaInput>
    connectOrCreate?: CategoriasCreateOrConnectWithoutProdutoCategoriaInput
    upsert?: CategoriasUpsertWithoutProdutoCategoriaInput
    connect?: CategoriasWhereUniqueInput
    update?: XOR<XOR<CategoriasUpdateToOneWithWhereWithoutProdutoCategoriaInput, CategoriasUpdateWithoutProdutoCategoriaInput>, CategoriasUncheckedUpdateWithoutProdutoCategoriaInput>
  }

  export type ProdutosUpdateOneRequiredWithoutProdutoCategoriaNestedInput = {
    create?: XOR<ProdutosCreateWithoutProdutoCategoriaInput, ProdutosUncheckedCreateWithoutProdutoCategoriaInput>
    connectOrCreate?: ProdutosCreateOrConnectWithoutProdutoCategoriaInput
    upsert?: ProdutosUpsertWithoutProdutoCategoriaInput
    connect?: ProdutosWhereUniqueInput
    update?: XOR<XOR<ProdutosUpdateToOneWithWhereWithoutProdutoCategoriaInput, ProdutosUpdateWithoutProdutoCategoriaInput>, ProdutosUncheckedUpdateWithoutProdutoCategoriaInput>
  }

  export type CarrinhoCreateNestedManyWithoutProdutosInput = {
    create?: XOR<CarrinhoCreateWithoutProdutosInput, CarrinhoUncheckedCreateWithoutProdutosInput> | CarrinhoCreateWithoutProdutosInput[] | CarrinhoUncheckedCreateWithoutProdutosInput[]
    connectOrCreate?: CarrinhoCreateOrConnectWithoutProdutosInput | CarrinhoCreateOrConnectWithoutProdutosInput[]
    createMany?: CarrinhoCreateManyProdutosInputEnvelope
    connect?: CarrinhoWhereUniqueInput | CarrinhoWhereUniqueInput[]
  }

  export type ProdutoCategoriaCreateNestedManyWithoutProdutosInput = {
    create?: XOR<ProdutoCategoriaCreateWithoutProdutosInput, ProdutoCategoriaUncheckedCreateWithoutProdutosInput> | ProdutoCategoriaCreateWithoutProdutosInput[] | ProdutoCategoriaUncheckedCreateWithoutProdutosInput[]
    connectOrCreate?: ProdutoCategoriaCreateOrConnectWithoutProdutosInput | ProdutoCategoriaCreateOrConnectWithoutProdutosInput[]
    createMany?: ProdutoCategoriaCreateManyProdutosInputEnvelope
    connect?: ProdutoCategoriaWhereUniqueInput | ProdutoCategoriaWhereUniqueInput[]
  }

  export type CarrinhoUncheckedCreateNestedManyWithoutProdutosInput = {
    create?: XOR<CarrinhoCreateWithoutProdutosInput, CarrinhoUncheckedCreateWithoutProdutosInput> | CarrinhoCreateWithoutProdutosInput[] | CarrinhoUncheckedCreateWithoutProdutosInput[]
    connectOrCreate?: CarrinhoCreateOrConnectWithoutProdutosInput | CarrinhoCreateOrConnectWithoutProdutosInput[]
    createMany?: CarrinhoCreateManyProdutosInputEnvelope
    connect?: CarrinhoWhereUniqueInput | CarrinhoWhereUniqueInput[]
  }

  export type ProdutoCategoriaUncheckedCreateNestedManyWithoutProdutosInput = {
    create?: XOR<ProdutoCategoriaCreateWithoutProdutosInput, ProdutoCategoriaUncheckedCreateWithoutProdutosInput> | ProdutoCategoriaCreateWithoutProdutosInput[] | ProdutoCategoriaUncheckedCreateWithoutProdutosInput[]
    connectOrCreate?: ProdutoCategoriaCreateOrConnectWithoutProdutosInput | ProdutoCategoriaCreateOrConnectWithoutProdutosInput[]
    createMany?: ProdutoCategoriaCreateManyProdutosInputEnvelope
    connect?: ProdutoCategoriaWhereUniqueInput | ProdutoCategoriaWhereUniqueInput[]
  }

  export type CarrinhoUpdateManyWithoutProdutosNestedInput = {
    create?: XOR<CarrinhoCreateWithoutProdutosInput, CarrinhoUncheckedCreateWithoutProdutosInput> | CarrinhoCreateWithoutProdutosInput[] | CarrinhoUncheckedCreateWithoutProdutosInput[]
    connectOrCreate?: CarrinhoCreateOrConnectWithoutProdutosInput | CarrinhoCreateOrConnectWithoutProdutosInput[]
    upsert?: CarrinhoUpsertWithWhereUniqueWithoutProdutosInput | CarrinhoUpsertWithWhereUniqueWithoutProdutosInput[]
    createMany?: CarrinhoCreateManyProdutosInputEnvelope
    set?: CarrinhoWhereUniqueInput | CarrinhoWhereUniqueInput[]
    disconnect?: CarrinhoWhereUniqueInput | CarrinhoWhereUniqueInput[]
    delete?: CarrinhoWhereUniqueInput | CarrinhoWhereUniqueInput[]
    connect?: CarrinhoWhereUniqueInput | CarrinhoWhereUniqueInput[]
    update?: CarrinhoUpdateWithWhereUniqueWithoutProdutosInput | CarrinhoUpdateWithWhereUniqueWithoutProdutosInput[]
    updateMany?: CarrinhoUpdateManyWithWhereWithoutProdutosInput | CarrinhoUpdateManyWithWhereWithoutProdutosInput[]
    deleteMany?: CarrinhoScalarWhereInput | CarrinhoScalarWhereInput[]
  }

  export type ProdutoCategoriaUpdateManyWithoutProdutosNestedInput = {
    create?: XOR<ProdutoCategoriaCreateWithoutProdutosInput, ProdutoCategoriaUncheckedCreateWithoutProdutosInput> | ProdutoCategoriaCreateWithoutProdutosInput[] | ProdutoCategoriaUncheckedCreateWithoutProdutosInput[]
    connectOrCreate?: ProdutoCategoriaCreateOrConnectWithoutProdutosInput | ProdutoCategoriaCreateOrConnectWithoutProdutosInput[]
    upsert?: ProdutoCategoriaUpsertWithWhereUniqueWithoutProdutosInput | ProdutoCategoriaUpsertWithWhereUniqueWithoutProdutosInput[]
    createMany?: ProdutoCategoriaCreateManyProdutosInputEnvelope
    set?: ProdutoCategoriaWhereUniqueInput | ProdutoCategoriaWhereUniqueInput[]
    disconnect?: ProdutoCategoriaWhereUniqueInput | ProdutoCategoriaWhereUniqueInput[]
    delete?: ProdutoCategoriaWhereUniqueInput | ProdutoCategoriaWhereUniqueInput[]
    connect?: ProdutoCategoriaWhereUniqueInput | ProdutoCategoriaWhereUniqueInput[]
    update?: ProdutoCategoriaUpdateWithWhereUniqueWithoutProdutosInput | ProdutoCategoriaUpdateWithWhereUniqueWithoutProdutosInput[]
    updateMany?: ProdutoCategoriaUpdateManyWithWhereWithoutProdutosInput | ProdutoCategoriaUpdateManyWithWhereWithoutProdutosInput[]
    deleteMany?: ProdutoCategoriaScalarWhereInput | ProdutoCategoriaScalarWhereInput[]
  }

  export type CarrinhoUncheckedUpdateManyWithoutProdutosNestedInput = {
    create?: XOR<CarrinhoCreateWithoutProdutosInput, CarrinhoUncheckedCreateWithoutProdutosInput> | CarrinhoCreateWithoutProdutosInput[] | CarrinhoUncheckedCreateWithoutProdutosInput[]
    connectOrCreate?: CarrinhoCreateOrConnectWithoutProdutosInput | CarrinhoCreateOrConnectWithoutProdutosInput[]
    upsert?: CarrinhoUpsertWithWhereUniqueWithoutProdutosInput | CarrinhoUpsertWithWhereUniqueWithoutProdutosInput[]
    createMany?: CarrinhoCreateManyProdutosInputEnvelope
    set?: CarrinhoWhereUniqueInput | CarrinhoWhereUniqueInput[]
    disconnect?: CarrinhoWhereUniqueInput | CarrinhoWhereUniqueInput[]
    delete?: CarrinhoWhereUniqueInput | CarrinhoWhereUniqueInput[]
    connect?: CarrinhoWhereUniqueInput | CarrinhoWhereUniqueInput[]
    update?: CarrinhoUpdateWithWhereUniqueWithoutProdutosInput | CarrinhoUpdateWithWhereUniqueWithoutProdutosInput[]
    updateMany?: CarrinhoUpdateManyWithWhereWithoutProdutosInput | CarrinhoUpdateManyWithWhereWithoutProdutosInput[]
    deleteMany?: CarrinhoScalarWhereInput | CarrinhoScalarWhereInput[]
  }

  export type ProdutoCategoriaUncheckedUpdateManyWithoutProdutosNestedInput = {
    create?: XOR<ProdutoCategoriaCreateWithoutProdutosInput, ProdutoCategoriaUncheckedCreateWithoutProdutosInput> | ProdutoCategoriaCreateWithoutProdutosInput[] | ProdutoCategoriaUncheckedCreateWithoutProdutosInput[]
    connectOrCreate?: ProdutoCategoriaCreateOrConnectWithoutProdutosInput | ProdutoCategoriaCreateOrConnectWithoutProdutosInput[]
    upsert?: ProdutoCategoriaUpsertWithWhereUniqueWithoutProdutosInput | ProdutoCategoriaUpsertWithWhereUniqueWithoutProdutosInput[]
    createMany?: ProdutoCategoriaCreateManyProdutosInputEnvelope
    set?: ProdutoCategoriaWhereUniqueInput | ProdutoCategoriaWhereUniqueInput[]
    disconnect?: ProdutoCategoriaWhereUniqueInput | ProdutoCategoriaWhereUniqueInput[]
    delete?: ProdutoCategoriaWhereUniqueInput | ProdutoCategoriaWhereUniqueInput[]
    connect?: ProdutoCategoriaWhereUniqueInput | ProdutoCategoriaWhereUniqueInput[]
    update?: ProdutoCategoriaUpdateWithWhereUniqueWithoutProdutosInput | ProdutoCategoriaUpdateWithWhereUniqueWithoutProdutosInput[]
    updateMany?: ProdutoCategoriaUpdateManyWithWhereWithoutProdutosInput | ProdutoCategoriaUpdateManyWithWhereWithoutProdutosInput[]
    deleteMany?: ProdutoCategoriaScalarWhereInput | ProdutoCategoriaScalarWhereInput[]
  }

  export type PedidosCreateNestedManyWithoutUsuariosInput = {
    create?: XOR<PedidosCreateWithoutUsuariosInput, PedidosUncheckedCreateWithoutUsuariosInput> | PedidosCreateWithoutUsuariosInput[] | PedidosUncheckedCreateWithoutUsuariosInput[]
    connectOrCreate?: PedidosCreateOrConnectWithoutUsuariosInput | PedidosCreateOrConnectWithoutUsuariosInput[]
    createMany?: PedidosCreateManyUsuariosInputEnvelope
    connect?: PedidosWhereUniqueInput | PedidosWhereUniqueInput[]
  }

  export type PedidosUncheckedCreateNestedManyWithoutUsuariosInput = {
    create?: XOR<PedidosCreateWithoutUsuariosInput, PedidosUncheckedCreateWithoutUsuariosInput> | PedidosCreateWithoutUsuariosInput[] | PedidosUncheckedCreateWithoutUsuariosInput[]
    connectOrCreate?: PedidosCreateOrConnectWithoutUsuariosInput | PedidosCreateOrConnectWithoutUsuariosInput[]
    createMany?: PedidosCreateManyUsuariosInputEnvelope
    connect?: PedidosWhereUniqueInput | PedidosWhereUniqueInput[]
  }

  export type PedidosUpdateManyWithoutUsuariosNestedInput = {
    create?: XOR<PedidosCreateWithoutUsuariosInput, PedidosUncheckedCreateWithoutUsuariosInput> | PedidosCreateWithoutUsuariosInput[] | PedidosUncheckedCreateWithoutUsuariosInput[]
    connectOrCreate?: PedidosCreateOrConnectWithoutUsuariosInput | PedidosCreateOrConnectWithoutUsuariosInput[]
    upsert?: PedidosUpsertWithWhereUniqueWithoutUsuariosInput | PedidosUpsertWithWhereUniqueWithoutUsuariosInput[]
    createMany?: PedidosCreateManyUsuariosInputEnvelope
    set?: PedidosWhereUniqueInput | PedidosWhereUniqueInput[]
    disconnect?: PedidosWhereUniqueInput | PedidosWhereUniqueInput[]
    delete?: PedidosWhereUniqueInput | PedidosWhereUniqueInput[]
    connect?: PedidosWhereUniqueInput | PedidosWhereUniqueInput[]
    update?: PedidosUpdateWithWhereUniqueWithoutUsuariosInput | PedidosUpdateWithWhereUniqueWithoutUsuariosInput[]
    updateMany?: PedidosUpdateManyWithWhereWithoutUsuariosInput | PedidosUpdateManyWithWhereWithoutUsuariosInput[]
    deleteMany?: PedidosScalarWhereInput | PedidosScalarWhereInput[]
  }

  export type PedidosUncheckedUpdateManyWithoutUsuariosNestedInput = {
    create?: XOR<PedidosCreateWithoutUsuariosInput, PedidosUncheckedCreateWithoutUsuariosInput> | PedidosCreateWithoutUsuariosInput[] | PedidosUncheckedCreateWithoutUsuariosInput[]
    connectOrCreate?: PedidosCreateOrConnectWithoutUsuariosInput | PedidosCreateOrConnectWithoutUsuariosInput[]
    upsert?: PedidosUpsertWithWhereUniqueWithoutUsuariosInput | PedidosUpsertWithWhereUniqueWithoutUsuariosInput[]
    createMany?: PedidosCreateManyUsuariosInputEnvelope
    set?: PedidosWhereUniqueInput | PedidosWhereUniqueInput[]
    disconnect?: PedidosWhereUniqueInput | PedidosWhereUniqueInput[]
    delete?: PedidosWhereUniqueInput | PedidosWhereUniqueInput[]
    connect?: PedidosWhereUniqueInput | PedidosWhereUniqueInput[]
    update?: PedidosUpdateWithWhereUniqueWithoutUsuariosInput | PedidosUpdateWithWhereUniqueWithoutUsuariosInput[]
    updateMany?: PedidosUpdateManyWithWhereWithoutUsuariosInput | PedidosUpdateManyWithWhereWithoutUsuariosInput[]
    deleteMany?: PedidosScalarWhereInput | PedidosScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type ProdutosCreateWithoutCarrinhoInput = {
    id: number
    name?: string | null
    description?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    marca?: string | null
    imageUrl?: string | null
    category?: string | null
    ProdutoCategoria?: ProdutoCategoriaCreateNestedManyWithoutProdutosInput
  }

  export type ProdutosUncheckedCreateWithoutCarrinhoInput = {
    id: number
    name?: string | null
    description?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    marca?: string | null
    imageUrl?: string | null
    category?: string | null
    ProdutoCategoria?: ProdutoCategoriaUncheckedCreateNestedManyWithoutProdutosInput
  }

  export type ProdutosCreateOrConnectWithoutCarrinhoInput = {
    where: ProdutosWhereUniqueInput
    create: XOR<ProdutosCreateWithoutCarrinhoInput, ProdutosUncheckedCreateWithoutCarrinhoInput>
  }

  export type PedidosCreateWithoutCarrinhoInput = {
    total?: Decimal | DecimalJsLike | number | string | null
    data?: Date | string | null
    Usuarios?: UsuariosCreateNestedOneWithoutPedidosInput
  }

  export type PedidosUncheckedCreateWithoutCarrinhoInput = {
    id?: number
    usuario_id?: number | null
    total?: Decimal | DecimalJsLike | number | string | null
    data?: Date | string | null
  }

  export type PedidosCreateOrConnectWithoutCarrinhoInput = {
    where: PedidosWhereUniqueInput
    create: XOR<PedidosCreateWithoutCarrinhoInput, PedidosUncheckedCreateWithoutCarrinhoInput>
  }

  export type ProdutosUpsertWithoutCarrinhoInput = {
    update: XOR<ProdutosUpdateWithoutCarrinhoInput, ProdutosUncheckedUpdateWithoutCarrinhoInput>
    create: XOR<ProdutosCreateWithoutCarrinhoInput, ProdutosUncheckedCreateWithoutCarrinhoInput>
    where?: ProdutosWhereInput
  }

  export type ProdutosUpdateToOneWithWhereWithoutCarrinhoInput = {
    where?: ProdutosWhereInput
    data: XOR<ProdutosUpdateWithoutCarrinhoInput, ProdutosUncheckedUpdateWithoutCarrinhoInput>
  }

  export type ProdutosUpdateWithoutCarrinhoInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    marca?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    ProdutoCategoria?: ProdutoCategoriaUpdateManyWithoutProdutosNestedInput
  }

  export type ProdutosUncheckedUpdateWithoutCarrinhoInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    marca?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    ProdutoCategoria?: ProdutoCategoriaUncheckedUpdateManyWithoutProdutosNestedInput
  }

  export type PedidosUpsertWithoutCarrinhoInput = {
    update: XOR<PedidosUpdateWithoutCarrinhoInput, PedidosUncheckedUpdateWithoutCarrinhoInput>
    create: XOR<PedidosCreateWithoutCarrinhoInput, PedidosUncheckedCreateWithoutCarrinhoInput>
    where?: PedidosWhereInput
  }

  export type PedidosUpdateToOneWithWhereWithoutCarrinhoInput = {
    where?: PedidosWhereInput
    data: XOR<PedidosUpdateWithoutCarrinhoInput, PedidosUncheckedUpdateWithoutCarrinhoInput>
  }

  export type PedidosUpdateWithoutCarrinhoInput = {
    total?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    data?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Usuarios?: UsuariosUpdateOneWithoutPedidosNestedInput
  }

  export type PedidosUncheckedUpdateWithoutCarrinhoInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuario_id?: NullableIntFieldUpdateOperationsInput | number | null
    total?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    data?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProdutoCategoriaCreateWithoutCategoriasInput = {
    Produtos: ProdutosCreateNestedOneWithoutProdutoCategoriaInput
  }

  export type ProdutoCategoriaUncheckedCreateWithoutCategoriasInput = {
    produto_id: number
  }

  export type ProdutoCategoriaCreateOrConnectWithoutCategoriasInput = {
    where: ProdutoCategoriaWhereUniqueInput
    create: XOR<ProdutoCategoriaCreateWithoutCategoriasInput, ProdutoCategoriaUncheckedCreateWithoutCategoriasInput>
  }

  export type ProdutoCategoriaCreateManyCategoriasInputEnvelope = {
    data: ProdutoCategoriaCreateManyCategoriasInput | ProdutoCategoriaCreateManyCategoriasInput[]
  }

  export type ProdutoCategoriaUpsertWithWhereUniqueWithoutCategoriasInput = {
    where: ProdutoCategoriaWhereUniqueInput
    update: XOR<ProdutoCategoriaUpdateWithoutCategoriasInput, ProdutoCategoriaUncheckedUpdateWithoutCategoriasInput>
    create: XOR<ProdutoCategoriaCreateWithoutCategoriasInput, ProdutoCategoriaUncheckedCreateWithoutCategoriasInput>
  }

  export type ProdutoCategoriaUpdateWithWhereUniqueWithoutCategoriasInput = {
    where: ProdutoCategoriaWhereUniqueInput
    data: XOR<ProdutoCategoriaUpdateWithoutCategoriasInput, ProdutoCategoriaUncheckedUpdateWithoutCategoriasInput>
  }

  export type ProdutoCategoriaUpdateManyWithWhereWithoutCategoriasInput = {
    where: ProdutoCategoriaScalarWhereInput
    data: XOR<ProdutoCategoriaUpdateManyMutationInput, ProdutoCategoriaUncheckedUpdateManyWithoutCategoriasInput>
  }

  export type ProdutoCategoriaScalarWhereInput = {
    AND?: ProdutoCategoriaScalarWhereInput | ProdutoCategoriaScalarWhereInput[]
    OR?: ProdutoCategoriaScalarWhereInput[]
    NOT?: ProdutoCategoriaScalarWhereInput | ProdutoCategoriaScalarWhereInput[]
    produto_id?: IntFilter<"ProdutoCategoria"> | number
    categoria_id?: IntFilter<"ProdutoCategoria"> | number
  }

  export type CarrinhoCreateWithoutPedidosInput = {
    quantidade?: number | null
    Produtos?: ProdutosCreateNestedOneWithoutCarrinhoInput
  }

  export type CarrinhoUncheckedCreateWithoutPedidosInput = {
    id?: number
    produto_id?: number | null
    quantidade?: number | null
  }

  export type CarrinhoCreateOrConnectWithoutPedidosInput = {
    where: CarrinhoWhereUniqueInput
    create: XOR<CarrinhoCreateWithoutPedidosInput, CarrinhoUncheckedCreateWithoutPedidosInput>
  }

  export type CarrinhoCreateManyPedidosInputEnvelope = {
    data: CarrinhoCreateManyPedidosInput | CarrinhoCreateManyPedidosInput[]
  }

  export type UsuariosCreateWithoutPedidosInput = {
    nome?: string | null
    sobrenome?: string | null
    usuario?: string | null
    senha?: string | null
  }

  export type UsuariosUncheckedCreateWithoutPedidosInput = {
    id?: number
    nome?: string | null
    sobrenome?: string | null
    usuario?: string | null
    senha?: string | null
  }

  export type UsuariosCreateOrConnectWithoutPedidosInput = {
    where: UsuariosWhereUniqueInput
    create: XOR<UsuariosCreateWithoutPedidosInput, UsuariosUncheckedCreateWithoutPedidosInput>
  }

  export type CarrinhoUpsertWithWhereUniqueWithoutPedidosInput = {
    where: CarrinhoWhereUniqueInput
    update: XOR<CarrinhoUpdateWithoutPedidosInput, CarrinhoUncheckedUpdateWithoutPedidosInput>
    create: XOR<CarrinhoCreateWithoutPedidosInput, CarrinhoUncheckedCreateWithoutPedidosInput>
  }

  export type CarrinhoUpdateWithWhereUniqueWithoutPedidosInput = {
    where: CarrinhoWhereUniqueInput
    data: XOR<CarrinhoUpdateWithoutPedidosInput, CarrinhoUncheckedUpdateWithoutPedidosInput>
  }

  export type CarrinhoUpdateManyWithWhereWithoutPedidosInput = {
    where: CarrinhoScalarWhereInput
    data: XOR<CarrinhoUpdateManyMutationInput, CarrinhoUncheckedUpdateManyWithoutPedidosInput>
  }

  export type CarrinhoScalarWhereInput = {
    AND?: CarrinhoScalarWhereInput | CarrinhoScalarWhereInput[]
    OR?: CarrinhoScalarWhereInput[]
    NOT?: CarrinhoScalarWhereInput | CarrinhoScalarWhereInput[]
    id?: IntFilter<"Carrinho"> | number
    produto_id?: IntNullableFilter<"Carrinho"> | number | null
    quantidade?: IntNullableFilter<"Carrinho"> | number | null
    pedido_id?: IntNullableFilter<"Carrinho"> | number | null
  }

  export type UsuariosUpsertWithoutPedidosInput = {
    update: XOR<UsuariosUpdateWithoutPedidosInput, UsuariosUncheckedUpdateWithoutPedidosInput>
    create: XOR<UsuariosCreateWithoutPedidosInput, UsuariosUncheckedCreateWithoutPedidosInput>
    where?: UsuariosWhereInput
  }

  export type UsuariosUpdateToOneWithWhereWithoutPedidosInput = {
    where?: UsuariosWhereInput
    data: XOR<UsuariosUpdateWithoutPedidosInput, UsuariosUncheckedUpdateWithoutPedidosInput>
  }

  export type UsuariosUpdateWithoutPedidosInput = {
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    sobrenome?: NullableStringFieldUpdateOperationsInput | string | null
    usuario?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UsuariosUncheckedUpdateWithoutPedidosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    sobrenome?: NullableStringFieldUpdateOperationsInput | string | null
    usuario?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CategoriasCreateWithoutProdutoCategoriaInput = {
    categoria_nome?: string | null
  }

  export type CategoriasUncheckedCreateWithoutProdutoCategoriaInput = {
    id?: number
    categoria_nome?: string | null
  }

  export type CategoriasCreateOrConnectWithoutProdutoCategoriaInput = {
    where: CategoriasWhereUniqueInput
    create: XOR<CategoriasCreateWithoutProdutoCategoriaInput, CategoriasUncheckedCreateWithoutProdutoCategoriaInput>
  }

  export type ProdutosCreateWithoutProdutoCategoriaInput = {
    id: number
    name?: string | null
    description?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    marca?: string | null
    imageUrl?: string | null
    category?: string | null
    Carrinho?: CarrinhoCreateNestedManyWithoutProdutosInput
  }

  export type ProdutosUncheckedCreateWithoutProdutoCategoriaInput = {
    id: number
    name?: string | null
    description?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    marca?: string | null
    imageUrl?: string | null
    category?: string | null
    Carrinho?: CarrinhoUncheckedCreateNestedManyWithoutProdutosInput
  }

  export type ProdutosCreateOrConnectWithoutProdutoCategoriaInput = {
    where: ProdutosWhereUniqueInput
    create: XOR<ProdutosCreateWithoutProdutoCategoriaInput, ProdutosUncheckedCreateWithoutProdutoCategoriaInput>
  }

  export type CategoriasUpsertWithoutProdutoCategoriaInput = {
    update: XOR<CategoriasUpdateWithoutProdutoCategoriaInput, CategoriasUncheckedUpdateWithoutProdutoCategoriaInput>
    create: XOR<CategoriasCreateWithoutProdutoCategoriaInput, CategoriasUncheckedCreateWithoutProdutoCategoriaInput>
    where?: CategoriasWhereInput
  }

  export type CategoriasUpdateToOneWithWhereWithoutProdutoCategoriaInput = {
    where?: CategoriasWhereInput
    data: XOR<CategoriasUpdateWithoutProdutoCategoriaInput, CategoriasUncheckedUpdateWithoutProdutoCategoriaInput>
  }

  export type CategoriasUpdateWithoutProdutoCategoriaInput = {
    categoria_nome?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CategoriasUncheckedUpdateWithoutProdutoCategoriaInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoria_nome?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProdutosUpsertWithoutProdutoCategoriaInput = {
    update: XOR<ProdutosUpdateWithoutProdutoCategoriaInput, ProdutosUncheckedUpdateWithoutProdutoCategoriaInput>
    create: XOR<ProdutosCreateWithoutProdutoCategoriaInput, ProdutosUncheckedCreateWithoutProdutoCategoriaInput>
    where?: ProdutosWhereInput
  }

  export type ProdutosUpdateToOneWithWhereWithoutProdutoCategoriaInput = {
    where?: ProdutosWhereInput
    data: XOR<ProdutosUpdateWithoutProdutoCategoriaInput, ProdutosUncheckedUpdateWithoutProdutoCategoriaInput>
  }

  export type ProdutosUpdateWithoutProdutoCategoriaInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    marca?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    Carrinho?: CarrinhoUpdateManyWithoutProdutosNestedInput
  }

  export type ProdutosUncheckedUpdateWithoutProdutoCategoriaInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    marca?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    Carrinho?: CarrinhoUncheckedUpdateManyWithoutProdutosNestedInput
  }

  export type CarrinhoCreateWithoutProdutosInput = {
    quantidade?: number | null
    Pedidos?: PedidosCreateNestedOneWithoutCarrinhoInput
  }

  export type CarrinhoUncheckedCreateWithoutProdutosInput = {
    id?: number
    quantidade?: number | null
    pedido_id?: number | null
  }

  export type CarrinhoCreateOrConnectWithoutProdutosInput = {
    where: CarrinhoWhereUniqueInput
    create: XOR<CarrinhoCreateWithoutProdutosInput, CarrinhoUncheckedCreateWithoutProdutosInput>
  }

  export type CarrinhoCreateManyProdutosInputEnvelope = {
    data: CarrinhoCreateManyProdutosInput | CarrinhoCreateManyProdutosInput[]
  }

  export type ProdutoCategoriaCreateWithoutProdutosInput = {
    Categorias: CategoriasCreateNestedOneWithoutProdutoCategoriaInput
  }

  export type ProdutoCategoriaUncheckedCreateWithoutProdutosInput = {
    categoria_id: number
  }

  export type ProdutoCategoriaCreateOrConnectWithoutProdutosInput = {
    where: ProdutoCategoriaWhereUniqueInput
    create: XOR<ProdutoCategoriaCreateWithoutProdutosInput, ProdutoCategoriaUncheckedCreateWithoutProdutosInput>
  }

  export type ProdutoCategoriaCreateManyProdutosInputEnvelope = {
    data: ProdutoCategoriaCreateManyProdutosInput | ProdutoCategoriaCreateManyProdutosInput[]
  }

  export type CarrinhoUpsertWithWhereUniqueWithoutProdutosInput = {
    where: CarrinhoWhereUniqueInput
    update: XOR<CarrinhoUpdateWithoutProdutosInput, CarrinhoUncheckedUpdateWithoutProdutosInput>
    create: XOR<CarrinhoCreateWithoutProdutosInput, CarrinhoUncheckedCreateWithoutProdutosInput>
  }

  export type CarrinhoUpdateWithWhereUniqueWithoutProdutosInput = {
    where: CarrinhoWhereUniqueInput
    data: XOR<CarrinhoUpdateWithoutProdutosInput, CarrinhoUncheckedUpdateWithoutProdutosInput>
  }

  export type CarrinhoUpdateManyWithWhereWithoutProdutosInput = {
    where: CarrinhoScalarWhereInput
    data: XOR<CarrinhoUpdateManyMutationInput, CarrinhoUncheckedUpdateManyWithoutProdutosInput>
  }

  export type ProdutoCategoriaUpsertWithWhereUniqueWithoutProdutosInput = {
    where: ProdutoCategoriaWhereUniqueInput
    update: XOR<ProdutoCategoriaUpdateWithoutProdutosInput, ProdutoCategoriaUncheckedUpdateWithoutProdutosInput>
    create: XOR<ProdutoCategoriaCreateWithoutProdutosInput, ProdutoCategoriaUncheckedCreateWithoutProdutosInput>
  }

  export type ProdutoCategoriaUpdateWithWhereUniqueWithoutProdutosInput = {
    where: ProdutoCategoriaWhereUniqueInput
    data: XOR<ProdutoCategoriaUpdateWithoutProdutosInput, ProdutoCategoriaUncheckedUpdateWithoutProdutosInput>
  }

  export type ProdutoCategoriaUpdateManyWithWhereWithoutProdutosInput = {
    where: ProdutoCategoriaScalarWhereInput
    data: XOR<ProdutoCategoriaUpdateManyMutationInput, ProdutoCategoriaUncheckedUpdateManyWithoutProdutosInput>
  }

  export type PedidosCreateWithoutUsuariosInput = {
    total?: Decimal | DecimalJsLike | number | string | null
    data?: Date | string | null
    Carrinho?: CarrinhoCreateNestedManyWithoutPedidosInput
  }

  export type PedidosUncheckedCreateWithoutUsuariosInput = {
    id?: number
    total?: Decimal | DecimalJsLike | number | string | null
    data?: Date | string | null
    Carrinho?: CarrinhoUncheckedCreateNestedManyWithoutPedidosInput
  }

  export type PedidosCreateOrConnectWithoutUsuariosInput = {
    where: PedidosWhereUniqueInput
    create: XOR<PedidosCreateWithoutUsuariosInput, PedidosUncheckedCreateWithoutUsuariosInput>
  }

  export type PedidosCreateManyUsuariosInputEnvelope = {
    data: PedidosCreateManyUsuariosInput | PedidosCreateManyUsuariosInput[]
  }

  export type PedidosUpsertWithWhereUniqueWithoutUsuariosInput = {
    where: PedidosWhereUniqueInput
    update: XOR<PedidosUpdateWithoutUsuariosInput, PedidosUncheckedUpdateWithoutUsuariosInput>
    create: XOR<PedidosCreateWithoutUsuariosInput, PedidosUncheckedCreateWithoutUsuariosInput>
  }

  export type PedidosUpdateWithWhereUniqueWithoutUsuariosInput = {
    where: PedidosWhereUniqueInput
    data: XOR<PedidosUpdateWithoutUsuariosInput, PedidosUncheckedUpdateWithoutUsuariosInput>
  }

  export type PedidosUpdateManyWithWhereWithoutUsuariosInput = {
    where: PedidosScalarWhereInput
    data: XOR<PedidosUpdateManyMutationInput, PedidosUncheckedUpdateManyWithoutUsuariosInput>
  }

  export type PedidosScalarWhereInput = {
    AND?: PedidosScalarWhereInput | PedidosScalarWhereInput[]
    OR?: PedidosScalarWhereInput[]
    NOT?: PedidosScalarWhereInput | PedidosScalarWhereInput[]
    id?: IntFilter<"Pedidos"> | number
    usuario_id?: IntNullableFilter<"Pedidos"> | number | null
    total?: DecimalNullableFilter<"Pedidos"> | Decimal | DecimalJsLike | number | string | null
    data?: DateTimeNullableFilter<"Pedidos"> | Date | string | null
  }

  export type ProdutoCategoriaCreateManyCategoriasInput = {
    produto_id: number
  }

  export type ProdutoCategoriaUpdateWithoutCategoriasInput = {
    Produtos?: ProdutosUpdateOneRequiredWithoutProdutoCategoriaNestedInput
  }

  export type ProdutoCategoriaUncheckedUpdateWithoutCategoriasInput = {
    produto_id?: IntFieldUpdateOperationsInput | number
  }

  export type ProdutoCategoriaUncheckedUpdateManyWithoutCategoriasInput = {
    produto_id?: IntFieldUpdateOperationsInput | number
  }

  export type CarrinhoCreateManyPedidosInput = {
    produto_id?: number | null
    quantidade?: number | null
  }

  export type CarrinhoUpdateWithoutPedidosInput = {
    quantidade?: NullableIntFieldUpdateOperationsInput | number | null
    Produtos?: ProdutosUpdateOneWithoutCarrinhoNestedInput
  }

  export type CarrinhoUncheckedUpdateWithoutPedidosInput = {
    id?: IntFieldUpdateOperationsInput | number
    produto_id?: NullableIntFieldUpdateOperationsInput | number | null
    quantidade?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CarrinhoUncheckedUpdateManyWithoutPedidosInput = {
    id?: IntFieldUpdateOperationsInput | number
    produto_id?: NullableIntFieldUpdateOperationsInput | number | null
    quantidade?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CarrinhoCreateManyProdutosInput = {
    quantidade?: number | null
    pedido_id?: number | null
  }

  export type ProdutoCategoriaCreateManyProdutosInput = {
    categoria_id: number
  }

  export type CarrinhoUpdateWithoutProdutosInput = {
    quantidade?: NullableIntFieldUpdateOperationsInput | number | null
    Pedidos?: PedidosUpdateOneWithoutCarrinhoNestedInput
  }

  export type CarrinhoUncheckedUpdateWithoutProdutosInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantidade?: NullableIntFieldUpdateOperationsInput | number | null
    pedido_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CarrinhoUncheckedUpdateManyWithoutProdutosInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantidade?: NullableIntFieldUpdateOperationsInput | number | null
    pedido_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ProdutoCategoriaUpdateWithoutProdutosInput = {
    Categorias?: CategoriasUpdateOneRequiredWithoutProdutoCategoriaNestedInput
  }

  export type ProdutoCategoriaUncheckedUpdateWithoutProdutosInput = {
    categoria_id?: IntFieldUpdateOperationsInput | number
  }

  export type ProdutoCategoriaUncheckedUpdateManyWithoutProdutosInput = {
    categoria_id?: IntFieldUpdateOperationsInput | number
  }

  export type PedidosCreateManyUsuariosInput = {
    total?: Decimal | DecimalJsLike | number | string | null
    data?: Date | string | null
  }

  export type PedidosUpdateWithoutUsuariosInput = {
    total?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    data?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Carrinho?: CarrinhoUpdateManyWithoutPedidosNestedInput
  }

  export type PedidosUncheckedUpdateWithoutUsuariosInput = {
    id?: IntFieldUpdateOperationsInput | number
    total?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    data?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Carrinho?: CarrinhoUncheckedUpdateManyWithoutPedidosNestedInput
  }

  export type PedidosUncheckedUpdateManyWithoutUsuariosInput = {
    id?: IntFieldUpdateOperationsInput | number
    total?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    data?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use CategoriasCountOutputTypeDefaultArgs instead
     */
    export type CategoriasCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoriasCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PedidosCountOutputTypeDefaultArgs instead
     */
    export type PedidosCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PedidosCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProdutosCountOutputTypeDefaultArgs instead
     */
    export type ProdutosCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProdutosCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsuariosCountOutputTypeDefaultArgs instead
     */
    export type UsuariosCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsuariosCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CarrinhoDefaultArgs instead
     */
    export type CarrinhoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CarrinhoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoriasDefaultArgs instead
     */
    export type CategoriasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoriasDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PedidosDefaultArgs instead
     */
    export type PedidosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PedidosDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProdutoCategoriaDefaultArgs instead
     */
    export type ProdutoCategoriaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProdutoCategoriaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProdutosDefaultArgs instead
     */
    export type ProdutosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProdutosDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsuariosDefaultArgs instead
     */
    export type UsuariosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsuariosDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}